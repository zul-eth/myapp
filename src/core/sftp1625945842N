"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationManager = void 0;
var coin_repository_1 = require("@/domain/coin/coin.repository");
var coin_service_1 = require("@/domain/coin/coin.service");
var coin_controller_1 = require("@/domain/coin/coin.controller");
var network_repository_1 = require("@/domain/network/network.repository");
var network_service_1 = require("@/domain/network/network.service");
var network_controller_1 = require("@/domain/network/network.controller");
var coin_network_repository_1 = require("@/domain/coin-network/coin-network.repository");
var coin_network_service_1 = require("@/domain/coin-network/coin-network.service");
var coin_network_controller_1 = require("@/domain/coin-network/coin-network.controller");
var payment_option_repository_1 = require("@/domain/payment-option/payment-option.repository");
var payment_option_service_1 = require("@/domain/payment-option/payment-option.service");
var payment_option_controller_1 = require("@/domain/payment-option/payment-option.controller");
var wallet_repository_1 = require("@/domain/wallet/wallet.repository");
var wallet_service_1 = require("@/domain/wallet/wallet.service");
var exchange_rate_repository_1 = require("@/domain/exchange-rate/exchange-rate.repository");
var exchange_rate_service_1 = require("@/domain/exchange-rate/exchange-rate.service");
var exchange_rate_controller_1 = require("@/domain/exchange-rate/exchange-rate.controller");
var order_repository_1 = require("@/domain/order/order.repository");
var order_service_1 = require("@/domain/order/order.service");
var order_controller_1 = require("@/domain/order/order.controller");
var ApplicationManager = /** @class */ (function () {
    function ApplicationManager() {
        var coinRepo = new coin_repository_1.CoinRepositoryPrisma();
        var coinService = new coin_service_1.CoinService(coinRepo);
        var coinController = new coin_controller_1.CoinController(coinService);
        this.coin = { repository: coinRepo, service: coinService, controller: coinController };
        var networkRepo = new network_repository_1.NetworkRepositoryPrisma();
        var networkService = new network_service_1.NetworkService(networkRepo);
        var networkController = new network_controller_1.NetworkController(networkService);
        this.network = { repository: networkRepo, service: networkService, controller: networkController };
        var cnRepo = new coin_network_repository_1.CoinNetworkRepositoryPrisma();
        var cnService = new coin_network_service_1.CoinNetworkService(cnRepo);
        var cnController = new coin_network_controller_1.CoinNetworkController(cnService);
        this.coinNetwork = { repository: cnRepo, service: cnService, controller: cnController };
        var poRepo = new payment_option_repository_1.PaymentOptionRepositoryPrisma();
        var poService = new payment_option_service_1.PaymentOptionService(poRepo);
        var poController = new payment_option_controller_1.PaymentOptionController(poService);
        this.paymentOption = { repository: poRepo, service: poService, controller: poController };
        var walletRepo = new wallet_repository_1.WalletRepositoryPrisma();
        var walletService = new wallet_service_1.WalletService(walletRepo);
        this.wallet = { repository: walletRepo, service: walletService };
        var rateRepo = new exchange_rate_repository_1.ExchangeRateRepositoryPrisma();
        var rateService = new exchange_rate_service_1.ExchangeRateService(rateRepo);
        var rateController = new exchange_rate_controller_1.ExchangeRateController(rateService);
        this.exchangeRate = { repository: rateRepo, service: rateService, controller: rateController };
        var orderRepo = new order_repository_1.OrderRepositoryPrisma();
        var orderService = new order_service_1.OrderService(orderRepo, rateService, walletService);
        var orderController = new order_controller_1.OrderController(orderService);
        this.order = { repository: orderRepo, service: orderService, controller: orderController };
    }
    return ApplicationManager;
}());
exports.ApplicationManager = ApplicationManager;
