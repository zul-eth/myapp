"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletService = void 0;
var prisma_1 = require("@/lib/prisma");
var hd_allocate_1 = require("@/app/actions/wallet/hd-allocate");
function mapFamilyToUniversal(f) {
    switch (f) {
        case "EVM": return "evm";
        case "TRON": return "tron";
        case "SOLANA": return "solana";
        case "EOS": return "eos";
        case "DOGE": return "doge";
        case "SUI": return "sui";
        case "LTC": return "ltc";
        case "TON": return "ton";
        default: throw new Error("ChainFamily ".concat(f, " belum didukung generator universal"));
    }
}
/**
 * Service sesuai konstruktor di ApplicationManager:
 *   const walletService = new WalletService(walletRepo)
 */
var WalletService = /** @class */ (function () {
    function WalletService(repo) {
        this.repo = repo;
    }
    /**
     * Ambil 1 address untuk networkId:
     * - coba stok pool yang belum terpakai
     * - kalau kosong â†’ derive baru via Server Action (aman), lalu simpan ke pool
     */
    WalletService.prototype.allocateForNetwork = function (networkId) {
        return __awaiter(this, void 0, void 0, function () {
            var net, chain, stock, attempt, _a, index, address, created, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, prisma_1.prisma.network.findUnique({ where: { id: networkId } })];
                    case 1:
                        net = _b.sent();
                        if (!net)
                            throw new Error("Network tidak ditemukan");
                        chain = mapFamilyToUniversal(net.family);
                        return [4 /*yield*/, this.repo.findOneUnused(chain)];
                    case 2:
                        stock = _b.sent();
                        if (stock)
                            return [2 /*return*/, stock];
                        attempt = 0;
                        _b.label = 3;
                    case 3:
                        if (!(attempt < 3)) return [3 /*break*/, 9];
                        return [4 /*yield*/, (0, hd_allocate_1.hdAllocateNew)(chain)];
                    case 4:
                        _a = _b.sent(), index = _a.index, address = _a.address;
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.repo.create({ chain: chain, derivationIndex: index, address: address })];
                    case 6:
                        created = _b.sent();
                        return [2 /*return*/, created];
                    case 7:
                        e_1 = _b.sent();
                        if (attempt === 2)
                            throw e_1;
                        return [3 /*break*/, 8];
                    case 8:
                        attempt++;
                        return [3 /*break*/, 3];
                    case 9: throw new Error("Gagal menyiapkan address baru");
                }
            });
        });
    };
    WalletService.prototype.assignToOrder = function (poolId, orderId, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.repo.assignToOrder(poolId, orderId, networkId)];
            });
        });
    };
    WalletService.prototype.releaseForOrder = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.releaseByOrderId(orderId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    WalletService.prototype.getPoolByOrder = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.repo.getByOrderId(orderId)];
            });
        });
    };
    return WalletService;
}());
exports.WalletService = WalletService;
