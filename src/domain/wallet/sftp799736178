"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletPoolRepository = exports.WalletRepositoryPrisma = void 0;
var prisma_1 = require("@/lib/prisma");
/**
 * Repositori pool address (Prisma).
 * Ekspor dengan nama utama `WalletRepositoryPrisma`
 * dan ALIAS `WalletPoolRepository` agar kompatibel dua-duanya.
 */
var WalletRepositoryPrisma = /** @class */ (function () {
    function WalletRepositoryPrisma() {
    }
    WalletRepositoryPrisma.prototype.findOneUnused = function (chain) {
        return prisma_1.prisma.walletPoolLegacy.findFirst({
            where: { chain: chain, isUsed: false },
            orderBy: [{ derivationIndex: "asc" }],
        });
    };
    WalletRepositoryPrisma.prototype.create = function (input) {
        return prisma_1.prisma.walletPoolLegacy.create({
            data: {
                chain: input.chain,
                derivationIndex: input.derivationIndex,
                address: input.address,
                isUsed: false,
            },
        });
    };
    WalletRepositoryPrisma.prototype.assignToOrder = function (poolId, orderId, networkId) {
        return prisma_1.prisma.walletPoolLegacy.update({
            where: { id: poolId },
            data: { isUsed: true, assignedOrderId: orderId, networkId: networkId },
        });
    };
    WalletRepositoryPrisma.prototype.releaseByOrderId = function (orderId) {
        return prisma_1.prisma.walletPoolLegacy.updateMany({
            where: { assignedOrderId: orderId },
            data: { isUsed: false, assignedOrderId: null, networkId: null },
        });
    };
    WalletRepositoryPrisma.prototype.getByOrderId = function (orderId) {
        return prisma_1.prisma.walletPoolLegacy.findFirst({ where: { assignedOrderId: orderId } });
    };
    return WalletRepositoryPrisma;
}());
exports.WalletRepositoryPrisma = WalletRepositoryPrisma;
exports.WalletPoolRepository = WalletRepositoryPrisma;
