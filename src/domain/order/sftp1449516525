"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderService = void 0;
var prisma_1 = require("@/lib/prisma");
var client_1 = require("@prisma/client");
var order_1 = require("@/lib/validation/order");
var zod_1 = require("zod");
// util sederhana
var DEFAULT_EXPIRE_MINUTES = 15;
var isUuid = function (s) { return !!s && zod_1.z.string().uuid().safeParse(s).success; };
var up = function (s) { return (typeof s === "string" ? s.trim().toUpperCase() : undefined); };
var minutesFromNow = function (m) { return new Date(Date.now() + m * 60000); };
var rand = function (len, abc) {
    if (abc === void 0) { abc = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; }
    return Array.from({ length: len }, function () { return abc[Math.floor(Math.random() * abc.length)]; }).join("");
};
var randomTag6 = function () { return String(Math.floor(100000 + Math.random() * 900000)); }; // 6-digit
var randomText8 = function () { return rand(8); };
/**
 * Konstruktor DI disesuaikan dgn ApplicationManager:
 *   new OrderService(orderRepo, rateService, walletService)
 * (rateService tidak wajib dipakai di sini, tapi kita terima agar kompatibel)
 */
var OrderService = /** @class */ (function () {
    function OrderService(orders, _rates, // keep untuk kompatibilitas
    wallets) {
        this.orders = orders;
        this._rates = _rates;
        this.wallets = wallets;
    }
    OrderService.prototype.listAll = function () { return this.orders.listAll(); };
    OrderService.prototype.getById = function (id) { return this.orders.getById(id); };
    // ---------- CREATE (FLEXIBLE) ----------
    OrderService.prototype.createFlexible = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var strict;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.toStrict(input)];
                    case 1:
                        strict = _a.sent();
                        if (!strict.expiresInMinutes)
                            strict.expiresInMinutes = DEFAULT_EXPIRE_MINUTES;
                        return [2 /*return*/, this.create(strict)];
                }
            });
        });
    };
    // ---------- CREATE (STRICT) ----------
    OrderService.prototype.create = function (input) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var payOption, buyCN, payCN, rateRow, priceRate, payNetwork, paymentMemo, pool, expiresAt, created;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, prisma_1.prisma.paymentOption.findFirst({
                            where: { coinId: input.payWithId, networkId: input.payNetworkId, isActive: true },
                            include: { coin: true, network: true },
                        })];
                    case 1:
                        payOption = _b.sent();
                        if (!payOption)
                            throw new Error("Payment option tidak tersedia/aktif");
                        return [4 /*yield*/, prisma_1.prisma.coinNetwork.findFirst({ where: { coinId: input.coinToBuyId, networkId: input.buyNetworkId, isActive: true } })];
                    case 2:
                        buyCN = _b.sent();
                        if (!buyCN)
                            throw new Error("CoinNetwork (buy) tidak aktif/valid");
                        return [4 /*yield*/, prisma_1.prisma.coinNetwork.findFirst({ where: { coinId: input.payWithId, networkId: input.payNetworkId, isActive: true } })];
                    case 3:
                        payCN = _b.sent();
                        if (!payCN)
                            throw new Error("CoinNetwork (pay) tidak aktif/valid");
                        return [4 /*yield*/, prisma_1.prisma.exchangeRate.findUnique({
                                where: {
                                    buyCoinId_buyNetworkId_payCoinId_payNetworkId: {
                                        buyCoinId: input.coinToBuyId,
                                        buyNetworkId: input.buyNetworkId,
                                        payCoinId: input.payWithId,
                                        payNetworkId: input.payNetworkId,
                                    },
                                },
                            })];
                    case 4:
                        rateRow = _b.sent();
                        if (!rateRow)
                            throw new Error("Exchange rate tidak ditemukan untuk pasangan ini");
                        priceRate = rateRow.rate;
                        return [4 /*yield*/, prisma_1.prisma.network.findUnique({ where: { id: input.payNetworkId } })];
                    case 5:
                        payNetwork = _b.sent();
                        if (!payNetwork)
                            throw new Error("Network pembayaran tidak ditemukan");
                        paymentMemo = null;
                        switch (payCN.memoKind) {
                            case client_1.MemoKind.XRP_TAG:
                                paymentMemo = randomTag6();
                                break;
                            case client_1.MemoKind.EOS_TEXT:
                            case client_1.MemoKind.TON_TEXT:
                            case client_1.MemoKind.OTHER:
                                paymentMemo = randomText8();
                                break;
                            default: paymentMemo = null;
                        }
                        return [4 /*yield*/, this.wallets.allocateForNetwork(input.payNetworkId)];
                    case 6:
                        pool = _b.sent();
                        expiresAt = minutesFromNow((_a = input.expiresInMinutes) !== null && _a !== void 0 ? _a : DEFAULT_EXPIRE_MINUTES);
                        return [4 /*yield*/, prisma_1.prisma.$transaction(function (tx) { return __awaiter(_this, void 0, void 0, function () {
                                var order;
                                var _a, _b, _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0: return [4 /*yield*/, tx.order.create({
                                                data: {
                                                    coinToBuyId: input.coinToBuyId,
                                                    buyNetworkId: input.buyNetworkId,
                                                    payWithId: input.payWithId,
                                                    payNetworkId: input.payNetworkId,
                                                    amount: input.amount,
                                                    priceRate: priceRate,
                                                    receivingAddr: input.receivingAddr,
                                                    receivingMemo: (_a = input.receivingMemo) !== null && _a !== void 0 ? _a : null,
                                                    paymentAddr: pool.address,
                                                    paymentMemo: paymentMemo,
                                                    expiresAt: expiresAt,
                                                    status: "WAITING_PAYMENT",
                                                },
                                            })];
                                        case 1:
                                            order = _e.sent();
                                            return [4 /*yield*/, tx.walletPoolLegacy.update({
                                                    where: { id: pool.id },
                                                    data: { isUsed: true, assignedOrderId: order.id, networkId: input.payNetworkId },
                                                })];
                                        case 2:
                                            _e.sent();
                                            return [4 /*yield*/, tx.payment.create({
                                                    data: {
                                                        orderId: order.id,
                                                        coinId: input.payWithId,
                                                        networkId: input.payNetworkId,
                                                        payToAddress: pool.address,
                                                        payToMemo: paymentMemo,
                                                        requiredConfirmations: (_b = payNetwork.requiredConfirmations) !== null && _b !== void 0 ? _b : 1,
                                                        assetType: payCN.assetType,
                                                        decimals: (_c = payCN.decimals) !== null && _c !== void 0 ? _c : 18,
                                                        assetContract: (_d = payCN.contractAddress) !== null && _d !== void 0 ? _d : null,
                                                    },
                                                })];
                                        case 3:
                                            _e.sent();
                                            return [2 /*return*/, order];
                                    }
                                });
                            }); })];
                    case 7:
                        created = _b.sent();
                        return [2 /*return*/, this.getById(created.id)];
                }
            });
        });
    };
    // ---------- STATUS / RELEASE ----------
    OrderService.prototype.releaseAddress = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.wallets.releaseForOrder(orderId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OrderService.prototype.cancel = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var cur;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.orders.getById(id)];
                    case 1:
                        cur = _a.sent();
                        if (!cur)
                            throw new Error("Order tidak ditemukan");
                        if (["COMPLETED", "CANCELED", "FAILED", "EXPIRED"].includes(cur.status))
                            return [2 /*return*/, cur];
                        return [4 /*yield*/, prisma_1.prisma.order.update({ where: { id: id }, data: { status: "CANCELED" } })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.releaseAddress(id)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, this.getById(id)];
                }
            });
        });
    };
    OrderService.prototype.updateStatus = function (id, status) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, prisma_1.prisma.order.update({ where: { id: id }, data: { status: status } })];
                    case 1:
                        _a.sent();
                        if (!["COMPLETED", "FAILED", "CANCELED", "EXPIRED"].includes(status)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.releaseAddress(id)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this.getById(id)];
                }
            });
        });
    };
    // ---------- REGENERATE INVOICE ----------
    OrderService.prototype.regenerateInvoice = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            var cur, pool, payCN, paymentMemo, expiresAt;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getById(orderId)];
                    case 1:
                        cur = _a.sent();
                        if (!cur)
                            throw new Error("Order tidak ditemukan");
                        if (!["FAILED", "CANCELED", "EXPIRED"].includes(cur.status)) {
                            throw new Error("Order belum selesai/invalid untuk regenerate");
                        }
                        return [4 /*yield*/, this.releaseAddress(orderId)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.wallets.allocateForNetwork(cur.payNetworkId)];
                    case 3:
                        pool = _a.sent();
                        return [4 /*yield*/, prisma_1.prisma.coinNetwork.findFirst({
                                where: { coinId: cur.payWithId, networkId: cur.payNetworkId, isActive: true },
                            })];
                    case 4:
                        payCN = _a.sent();
                        if (!payCN)
                            throw new Error("CoinNetwork (pay) tidak aktif/valid");
                        paymentMemo = null;
                        switch (payCN.memoKind) {
                            case "XRP_TAG":
                                paymentMemo = randomTag6();
                                break;
                            case "EOS_TEXT":
                            case "TON_TEXT":
                            case "OTHER":
                                paymentMemo = randomText8();
                                break;
                            default: paymentMemo = null;
                        }
                        expiresAt = minutesFromNow(DEFAULT_EXPIRE_MINUTES);
                        return [4 /*yield*/, prisma_1.prisma.$transaction(function (tx) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, tx.walletPoolLegacy.update({
                                                where: { id: pool.id },
                                                data: { isUsed: true, assignedOrderId: cur.id, networkId: cur.payNetworkId },
                                            })];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, tx.order.update({
                                                    where: { id: cur.id },
                                                    data: {
                                                        paymentAddr: pool.address,
                                                        paymentMemo: paymentMemo,
                                                        status: "WAITING_PAYMENT",
                                                        expiresAt: expiresAt,
                                                    },
                                                })];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, tx.payment.update({
                                                    where: { orderId: cur.id },
                                                    data: {
                                                        payToAddress: pool.address,
                                                        payToMemo: paymentMemo,
                                                        status: "NOT_STARTED",
                                                        txHash: null,
                                                        fromAddress: null,
                                                        toAddress: null,
                                                        amountRaw: null,
                                                        confirmations: 0,
                                                        detectedAt: null,
                                                        confirmedAt: null,
                                                        lastWebhookEventId: null,
                                                        verificationSource: null,
                                                        notes: null,
                                                    },
                                                })];
                                        case 3:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, this.getById(orderId)];
                }
            });
        });
    };
    // ---------- EXPIRE JOB (15 menit) ----------
    OrderService.prototype.expireOverdue = function () {
        return __awaiter(this, void 0, void 0, function () {
            var now, stale, _i, stale_1, o;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        now = new Date();
                        return [4 /*yield*/, prisma_1.prisma.order.findMany({
                                where: {
                                    status: { in: ["PENDING", "WAITING_PAYMENT"] },
                                    OR: [
                                        { expiresAt: { lt: now } },
                                        { AND: [{ expiresAt: null }, { createdAt: { lt: new Date(now.getTime() - DEFAULT_EXPIRE_MINUTES * 60 * 1000) } }] },
                                    ],
                                },
                                select: { id: true },
                            })];
                    case 1:
                        stale = _a.sent();
                        _i = 0, stale_1 = stale;
                        _a.label = 2;
                    case 2:
                        if (!(_i < stale_1.length)) return [3 /*break*/, 5];
                        o = stale_1[_i];
                        return [4 /*yield*/, this.updateStatus(o.id, "EXPIRED")];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, { expired: stale.length }];
                }
            });
        });
    };
    // ---------- FLEX → STRICT ----------
    OrderService.prototype.toStrict = function (input) {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var coinToBuyId, buyNetworkId, payWithId, payNetworkId;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.resolveCoinId({ id: input.coinToBuyId, symbol: input.coinToBuySymbol })];
                    case 1:
                        coinToBuyId = _d.sent();
                        return [4 /*yield*/, this.resolveNetworkId({ id: input.buyNetworkId, symbol: input.buyNetworkSymbol, name: input.buyNetworkName })];
                    case 2:
                        buyNetworkId = _d.sent();
                        if (!input.paymentOptionId) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.resolvePayByPaymentOptionId(input.paymentOptionId)];
                    case 3:
                        (_b = _d.sent(), payWithId = _b.payWithId, payNetworkId = _b.payNetworkId);
                        return [3 /*break*/, 9];
                    case 4:
                        if (!input.payPair) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.resolvePayByPair(input.payPair)];
                    case 5:
                        (_c = _d.sent(), payWithId = _c.payWithId, payNetworkId = _c.payNetworkId);
                        return [3 /*break*/, 9];
                    case 6: return [4 /*yield*/, this.resolveCoinId({ id: input.payWithId, symbol: input.payWithSymbol })];
                    case 7:
                        payWithId = _d.sent();
                        return [4 /*yield*/, this.resolveNetworkId({ id: input.payNetworkId, symbol: input.payNetworkSymbol, name: input.payNetworkName })];
                    case 8:
                        payNetworkId = _d.sent();
                        _d.label = 9;
                    case 9: return [2 /*return*/, order_1.OrderCreateStrictSchema.parse({
                            coinToBuyId: coinToBuyId,
                            buyNetworkId: buyNetworkId,
                            payWithId: payWithId,
                            payNetworkId: payNetworkId,
                            amount: input.amount,
                            receivingAddr: input.receivingAddr,
                            receivingMemo: input.receivingMemo,
                            expiresInMinutes: (_a = input.expiresInMinutes) !== null && _a !== void 0 ? _a : DEFAULT_EXPIRE_MINUTES,
                        })];
                }
            });
        });
    };
    OrderService.prototype.resolveCoinId = function (_a) {
        var _b;
        var id = _a.id, symbol = _a.symbol;
        return __awaiter(this, void 0, void 0, function () {
            var sym, coin;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (id && isUuid(id))
                            return [2 /*return*/, id];
                        sym = (_b = (symbol !== null && symbol !== void 0 ? symbol : id)) === null || _b === void 0 ? void 0 : _b.toString();
                        if (!sym) return [3 /*break*/, 2];
                        return [4 /*yield*/, prisma_1.prisma.coin.findUnique({ where: { symbol: up(sym) } })];
                    case 1:
                        coin = _c.sent();
                        if (!coin)
                            throw new Error("Coin dengan symbol '".concat(sym, "' tidak ditemukan"));
                        return [2 /*return*/, coin.id];
                    case 2: throw new Error("coin tidak valid");
                }
            });
        });
    };
    OrderService.prototype.resolveNetworkId = function (_a) {
        var _b;
        var id = _a.id, symbol = _a.symbol, name = _a.name;
        return __awaiter(this, void 0, void 0, function () {
            var byName, sym, n;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (id && isUuid(id))
                            return [2 /*return*/, id];
                        if (!name) return [3 /*break*/, 2];
                        return [4 /*yield*/, prisma_1.prisma.network.findUnique({ where: { name: name } })];
                    case 1:
                        byName = _c.sent();
                        if (byName)
                            return [2 /*return*/, byName.id];
                        _c.label = 2;
                    case 2:
                        sym = (_b = (symbol !== null && symbol !== void 0 ? symbol : id)) === null || _b === void 0 ? void 0 : _b.toString();
                        if (!sym) return [3 /*break*/, 4];
                        return [4 /*yield*/, prisma_1.prisma.network.findFirst({ where: { symbol: up(sym), isActive: true } })];
                    case 3:
                        n = _c.sent();
                        if (n)
                            return [2 /*return*/, n.id];
                        _c.label = 4;
                    case 4: throw new Error("network tidak valid");
                }
            });
        });
    };
    OrderService.prototype.resolvePayByPaymentOptionId = function (paymentOptionId) {
        return __awaiter(this, void 0, void 0, function () {
            var po;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, prisma_1.prisma.paymentOption.findUnique({
                            where: { id: paymentOptionId }, include: { coin: true, network: true }
                        })];
                    case 1:
                        po = _a.sent();
                        if (!po || !po.isActive)
                            throw new Error("paymentOption tidak ditemukan/aktif");
                        return [2 /*return*/, { payWithId: po.coinId, payNetworkId: po.networkId }];
                }
            });
        });
    };
    OrderService.prototype.resolvePayByPair = function (payPair) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, coinSym, netSymRaw, coin, byName, net, _c, po;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = payPair.split(":"), coinSym = _b[0], netSymRaw = _b[1];
                        return [4 /*yield*/, prisma_1.prisma.coin.findUnique({ where: { symbol: up(coinSym) } })];
                    case 1:
                        coin = _d.sent();
                        if (!coin)
                            throw new Error("Coin '".concat(coinSym, "' tidak ditemukan"));
                        return [4 /*yield*/, prisma_1.prisma.network.findUnique({ where: { name: netSymRaw } })];
                    case 2:
                        byName = _d.sent();
                        if (!(byName !== null && byName !== void 0)) return [3 /*break*/, 3];
                        _c = byName;
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, prisma_1.prisma.network.findFirst({ where: { symbol: up(netSymRaw), isActive: true } })];
                    case 4:
                        _c = (_d.sent());
                        _d.label = 5;
                    case 5:
                        net = _c;
                        if (!net)
                            throw new Error("Network '".concat(netSymRaw, "' tidak ditemukan"));
                        return [4 /*yield*/, prisma_1.prisma.paymentOption.findFirst({ where: { coinId: coin.id, networkId: net.id, isActive: true } })];
                    case 6:
                        po = _d.sent();
                        if (!po)
                            throw new Error("Payment option ".concat(coin.symbol, ":").concat((_a = net.symbol) !== null && _a !== void 0 ? _a : net.name, " tidak tersedia"));
                        return [2 /*return*/, { payWithId: coin.id, payNetworkId: net.id }];
                }
            });
        });
    };
    return OrderService;
}());
exports.OrderService = OrderService;
