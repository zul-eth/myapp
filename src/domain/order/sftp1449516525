"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderService = void 0;
var client_1 = require("@prisma/client");
var OrderService = /** @class */ (function () {
    function OrderService(repo, rateService, walletService) {
        this.repo = repo;
        this.rateService = rateService;
        this.walletService = walletService;
    }
    /**
     * Buat order dengan rate yang diambil langsung dari ExchangeRate.
     * - Menimpa priceRate yang dikirim klien
     * - Alokasikan payment address sesuai family jaringan bayar
     * - Status awal: WAITING_PAYMENT
     */
    OrderService.prototype.create = function (input) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var pair, amount, priceRate, chainFamily, wallet, defaultExpires, expiresAt, data, order;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pair = null;
                        if (!("pairId" in input)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.rateService.getById(input.pairId)];
                    case 1:
                        pair = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.rateService.getLatest({
                            buyCoinId: input.buyCoinId,
                            buyNetworkId: input.buyNetworkId,
                            payCoinId: input.payWithId,
                            payNetworkId: input.payNetworkId,
                        })];
                    case 3:
                        pair = _b.sent();
                        _b.label = 4;
                    case 4:
                        if (!pair)
                            throw new Error("Exchange rate/pair tidak ditemukan");
                        amount = Number(("amount" in input && input.amount) || 0);
                        if (!amount || amount <= 0)
                            throw new Error("amount harus > 0");
                        priceRate = Number(pair.rate);
                        if (!priceRate || priceRate <= 0)
                            throw new Error("Rate tidak valid");
                        chainFamily = pair.payNetwork.family;
                        return [4 /*yield*/, this.walletService.getOrGenerateAddress(chainFamily)];
                    case 5:
                        wallet = _b.sent();
                        defaultExpires = new Date(Date.now() + 15 * 60 * 1000);
                        expiresAt = "expiresAt" in input && input.expiresAt ? input.expiresAt : defaultExpires;
                        data = {
                            coinToBuyId: pair.buyCoinId,
                            buyNetworkId: pair.buyNetworkId,
                            payWithId: pair.payCoinId,
                            payNetworkId: pair.payNetworkId,
                            amount: amount,
                            priceRate: priceRate,
                            status: client_1.OrderStatus.WAITING_PAYMENT,
                            receivingAddr: input.receivingAddr,
                            receivingMemo: (_a = input.receivingMemo) !== null && _a !== void 0 ? _a : null,
                            paymentAddr: wallet.address,
                            paymentMemo: null,
                            expiresAt: expiresAt,
                        };
                        return [4 /*yield*/, this.repo.createOrder(data)];
                    case 6:
                        order = _b.sent();
                        if (!wallet.id) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.walletService.assignAddressToOrder(wallet.id, order.id)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, this.repo.findById(order.id)];
                }
            });
        });
    };
    /**
     * Update order. Jika pasangan/rate berubah â†’ ambil rate terbaru.
     * Rilis alamat saat status terminal.
     */
    OrderService.prototype.update = function (id, patch) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var order, pair, fields, pair, updated;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, this.repo.findById(id)];
                    case 1:
                        order = _f.sent();
                        if (!order)
                            throw new Error("Order tidak ditemukan");
                        if (!(patch.pairId && typeof patch.pairId === "string")) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.rateService.getById(patch.pairId)];
                    case 2:
                        pair = _f.sent();
                        if (!pair)
                            throw new Error("Exchange rate/pair tidak ditemukan");
                        patch.coinToBuyId = pair.buyCoinId;
                        patch.buyNetworkId = pair.buyNetworkId;
                        patch.payWithId = pair.payCoinId;
                        patch.payNetworkId = pair.payNetworkId;
                        patch.priceRate = pair.rate;
                        _f.label = 3;
                    case 3:
                        fields = ["coinToBuyId", "buyNetworkId", "payWithId", "payNetworkId"];
                        if (!fields.some(function (k) { return k in patch; })) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.rateService.getLatest({
                                buyCoinId: String((_a = patch.coinToBuyId) !== null && _a !== void 0 ? _a : order.coinToBuyId),
                                buyNetworkId: String((_b = patch.buyNetworkId) !== null && _b !== void 0 ? _b : order.buyNetworkId),
                                payCoinId: String((_c = patch.payWithId) !== null && _c !== void 0 ? _c : order.payWithId),
                                payNetworkId: String((_d = patch.payNetworkId) !== null && _d !== void 0 ? _d : order.payNetworkId),
                            })];
                    case 4:
                        pair = _f.sent();
                        if (!pair)
                            throw new Error("Exchange rate/pair tidak ditemukan");
                        patch.priceRate = pair.rate;
                        _f.label = 5;
                    case 5: return [4 /*yield*/, this.repo.updateOrder(id, patch)];
                    case 6:
                        updated = _f.sent();
                        if (!("status" in patch &&
                            [client_1.OrderStatus.COMPLETED, client_1.OrderStatus.EXPIRED, client_1.OrderStatus.FAILED].includes(patch.status))) return [3 /*break*/, 8];
                        if (!((_e = order.walletPoolLegacy) === null || _e === void 0 ? void 0 : _e.id)) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.walletService.releaseAddress(order.walletPoolLegacy.id)];
                    case 7:
                        _f.sent();
                        _f.label = 8;
                    case 8: return [2 /*return*/, this.repo.findById(updated.id)];
                }
            });
        });
    };
    OrderService.prototype.setStatus = function (id, status) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var order, updated;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.repo.findById(id)];
                    case 1:
                        order = _b.sent();
                        if (!order)
                            throw new Error("Order tidak ditemukan");
                        return [4 /*yield*/, this.repo.updateOrder(id, { status: status })];
                    case 2:
                        updated = _b.sent();
                        if (![client_1.OrderStatus.COMPLETED, client_1.OrderStatus.EXPIRED, client_1.OrderStatus.FAILED].includes(status)) return [3 /*break*/, 4];
                        if (!((_a = order.walletPoolLegacy) === null || _a === void 0 ? void 0 : _a.id)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.walletService.releaseAddress(order.walletPoolLegacy.id)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/, updated];
                }
            });
        });
    };
    OrderService.prototype.get = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var o;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.findById(id)];
                    case 1:
                        o = _a.sent();
                        if (!o)
                            throw new Error("Order tidak ditemukan");
                        return [2 /*return*/, o];
                }
            });
        });
    };
    OrderService.prototype.list = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.repo.listAll(params)];
            });
        });
    };
    return OrderService;
}());
exports.OrderService = OrderService;
