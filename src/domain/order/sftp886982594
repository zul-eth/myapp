"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderRepositoryPrisma = void 0;
var prisma_1 = require("@/lib/prisma");
var OrderRepositoryPrisma = /** @class */ (function () {
    function OrderRepositoryPrisma() {
    }
    OrderRepositoryPrisma.prototype.listAll = function () {
        return prisma_1.prisma.order.findMany({
            orderBy: { createdAt: "desc" },
            include: {
                coinToBuy: true,
                buyNetwork: true,
                payWith: true,
                payNetwork: true,
                payment: true,
            },
        });
    };
    OrderRepositoryPrisma.prototype.getById = function (id) {
        return prisma_1.prisma.order.findUnique({
            where: { id: id },
            include: {
                coinToBuy: true,
                buyNetwork: true,
                payWith: true,
                payNetwork: true,
                payment: true,
            },
        });
    };
    OrderRepositoryPrisma.prototype.create = function (data) {
        var _a, _b, _c;
        return prisma_1.prisma.order.create({
            data: {
                coinToBuyId: data.coinToBuyId,
                buyNetworkId: data.buyNetworkId,
                payWithId: data.payWithId,
                payNetworkId: data.payNetworkId,
                amount: data.amount,
                priceRate: data.priceRate,
                receivingAddr: data.receivingAddr,
                receivingMemo: (_a = data.receivingMemo) !== null && _a !== void 0 ? _a : null,
                paymentAddr: data.paymentAddr,
                paymentMemo: (_b = data.paymentMemo) !== null && _b !== void 0 ? _b : null,
                expiresAt: (_c = data.expiresAt) !== null && _c !== void 0 ? _c : null,
                status: "WAITING_PAYMENT",
            },
        });
    };
    OrderRepositoryPrisma.prototype.updateStatus = function (id, status) {
        return prisma_1.prisma.order.update({ where: { id: id }, data: { status: status } });
    };
    OrderRepositoryPrisma.prototype.cancel = function (id) {
        return prisma_1.prisma.order.update({ where: { id: id }, data: { status: "CANCELED" } });
    };
    OrderRepositoryPrisma.prototype.markExpired = function (id) {
        return prisma_1.prisma.order.update({ where: { id: id }, data: { status: "EXPIRED" } });
    };
    OrderRepositoryPrisma.prototype.setPayout = function (id, payoutHash) {
        return prisma_1.prisma.order.update({ where: { id: id }, data: { payoutHash: payoutHash, payoutAt: new Date() } });
    };
    return OrderRepositoryPrisma;
}());
exports.OrderRepositoryPrisma = OrderRepositoryPrisma;
