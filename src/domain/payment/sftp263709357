"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentService = void 0;
var client_1 = require("@prisma/client");
var payment_repository_1 = require("./payment.repository");
var wallet_service_1 = require("@/domain/wallet/wallet.service");
var prisma = new client_1.PrismaClient();
var PaymentService = /** @class */ (function () {
    function PaymentService(repo, wallet) {
        if (repo === void 0) { repo = new payment_repository_1.PaymentRepository(); }
        if (wallet === void 0) { wallet = new wallet_service_1.WalletService(); }
        this.repo = repo;
        this.wallet = wallet;
    }
    /**
     * Membuat Payment untuk sebuah order:
     * - ambil requiredConfirmations dari Network
     * - alokasikan alamat invoice (HD pool lama)
     */
    PaymentService.prototype.createForOrder = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var orderId, payCoinId, payNetworkId, network, addr, payment;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderId = params.orderId, payCoinId = params.payCoinId, payNetworkId = params.payNetworkId;
                        return [4 /*yield*/, prisma.network.findUnique({
                                where: { id: payNetworkId },
                                select: { id: true, family: true, requiredConfirmations: true },
                            })];
                    case 1:
                        network = _a.sent();
                        if (!network)
                            throw new Error("Network tidak ditemukan");
                        return [4 /*yield*/, this.wallet.getOrGenerateAddress(network.family)];
                    case 2:
                        addr = _a.sent();
                        return [4 /*yield*/, this.repo.create({
                                orderId: orderId,
                                coinId: payCoinId,
                                networkId: payNetworkId,
                                payToAddress: addr.address,
                                payToMemo: null,
                                confirmations: 0,
                                requiredConfirmations: network.requiredConfirmations || 1,
                                status: client_1.PaymentStatus.NOT_STARTED,
                            })];
                    case 3:
                        payment = _a.sent();
                        // simpan ke kolom Order.paymentAddr/Memo agar tampil di UI lama
                        return [4 /*yield*/, prisma.order.update({
                                where: { id: orderId },
                                data: {
                                    paymentAddr: payment.payToAddress,
                                    paymentMemo: payment.payToMemo,
                                },
                            })];
                    case 4:
                        // simpan ke kolom Order.paymentAddr/Memo agar tampil di UI lama
                        _a.sent();
                        if (!addr.id) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.wallet.assignAddressToOrder(addr.id, orderId)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, payment];
                }
            });
        });
    };
    PaymentService.prototype.setStatusByOrder = function (orderId, status) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.repo.setStatus(orderId, status)];
            });
        });
    };
    PaymentService.prototype.updateConfirmations = function (orderId, confirmations) {
        return __awaiter(this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.setConfirmations(orderId, confirmations)];
                    case 1:
                        p = _a.sent();
                        if (!(confirmations >= (p.requiredConfirmations || 1))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.repo.markConfirmed(orderId)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this.repo.getByOrderId(orderId)];
                }
            });
        });
    };
    PaymentService.prototype.markDetected = function (orderId, payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.setDetectedTx(orderId, payload)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.repo.setStatus(orderId, client_1.PaymentStatus.DETECTED)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.repo.getByOrderId(orderId)];
                }
            });
        });
    };
    PaymentService.prototype.getByOrderId = function (orderId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.repo.getByOrderId(orderId)];
            });
        });
    };
    return PaymentService;
}());
exports.PaymentService = PaymentService;
