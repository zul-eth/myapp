"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkRepositoryPrisma = void 0;
var prisma_1 = require("@/lib/prisma");
var base_repository_1 = require("@/domain/common/base.repository");
var client_1 = require("@prisma/client");
var NetworkRepositoryPrisma = /** @class */ (function (_super) {
    __extends(NetworkRepositoryPrisma, _super);
    function NetworkRepositoryPrisma() {
        return _super.call(this, prisma_1.prisma.network) || this;
    }
    NetworkRepositoryPrisma.prototype.findAllClean = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, prisma_1.prisma.network.findMany({
                        orderBy: { createdAt: "desc" }
                    })];
            });
        });
    };
    NetworkRepositoryPrisma.prototype.createNetwork = function (data) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var name, exists;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        name = data.name.trim();
                        if (!name)
                            throw new Error("Name wajib diisi");
                        return [4 /*yield*/, prisma_1.prisma.network.findFirst({
                                where: { name: { equals: name, mode: "insensitive" } }
                            })];
                    case 1:
                        exists = _b.sent();
                        if (exists)
                            throw new Error("Network dengan name ".concat(name, " sudah ada"));
                        return [2 /*return*/, prisma_1.prisma.network.create({
                                data: {
                                    name: name,
                                    logoUrl: ((_a = data.logoUrl) === null || _a === void 0 ? void 0 : _a.trim()) || null,
                                    family: data.family,
                                    chainId: data.chainId || null,
                                    symbol: data.symbol || null,
                                    rpcUrl: data.rpcUrl || null,
                                    explorer: data.explorer || null
                                }
                            })];
                }
            });
        });
    };
    NetworkRepositoryPrisma.prototype.updateNetwork = function (id, data) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var updateData, name, exists;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        updateData = {};
                        if (!data.name) return [3 /*break*/, 2];
                        name = data.name.trim();
                        return [4 /*yield*/, prisma_1.prisma.network.findFirst({
                                where: { name: { equals: name, mode: "insensitive" }, NOT: { id: id } }
                            })];
                    case 1:
                        exists = _b.sent();
                        if (exists)
                            throw new Error("Network dengan name ".concat(name, " sudah ada"));
                        updateData.name = name;
                        _b.label = 2;
                    case 2:
                        if (data.logoUrl !== undefined)
                            updateData.logoUrl = ((_a = data.logoUrl) === null || _a === void 0 ? void 0 : _a.trim()) || null;
                        if (data.family !== undefined)
                            updateData.family = data.family;
                        if (data.chainId !== undefined)
                            updateData.chainId = data.chainId;
                        if (data.symbol !== undefined)
                            updateData.symbol = data.symbol;
                        if (data.rpcUrl !== undefined)
                            updateData.rpcUrl = data.rpcUrl;
                        if (data.explorer !== undefined)
                            updateData.explorer = data.explorer;
                        return [2 /*return*/, prisma_1.prisma.network.update({
                                where: { id: id },
                                data: updateData
                            })];
                }
            });
        });
    };
    NetworkRepositoryPrisma.prototype.deleteNetwork = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var activeStatuses, activeOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        activeStatuses = [
                            client_1.OrderStatus.PENDING,
                            client_1.OrderStatus.WAITING_PAYMENT,
                            client_1.OrderStatus.UNDERPAID,
                            client_1.OrderStatus.WAITING_CONFIRMATION
                        ];
                        return [4 /*yield*/, prisma_1.prisma.order.findFirst({
                                where: {
                                    OR: [{ buyNetworkId: id }, { payNetworkId: id }],
                                    status: { in: activeStatuses }
                                }
                            })];
                    case 1:
                        activeOrder = _a.sent();
                        if (!activeOrder) return [3 /*break*/, 3];
                        return [4 /*yield*/, prisma_1.prisma.network.update({
                                where: { id: id },
                                data: { isActive: false }
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, { success: true, type: "soft-delete", message: "Network dinonaktifkan karena masih digunakan di order aktif" }];
                    case 3: return [4 /*yield*/, prisma_1.prisma.coinNetwork.deleteMany({ where: { networkId: id } })];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, prisma_1.prisma.paymentOption.deleteMany({ where: { networkId: id } })];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, prisma_1.prisma.order.deleteMany({
                                where: { OR: [{ buyNetworkId: id }, { payNetworkId: id }] }
                            })];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, prisma_1.prisma.exchangeRate.deleteMany({
                                where: { OR: [{ buyNetworkId: id }, { payNetworkId: id }] }
                            })];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, prisma_1.prisma.network.delete({ where: { id: id } })];
                    case 8:
                        _a.sent();
                        return [2 /*return*/, { success: true, type: "hard-delete", message: "Network dihapus permanen" }];
                }
            });
        });
    };
    return NetworkRepositoryPrisma;
}(base_repository_1.BaseRepository));
exports.NetworkRepositoryPrisma = NetworkRepositoryPrisma;
