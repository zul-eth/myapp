"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkEvmPayment = void 0;
var ethers_1 = require("ethers");
var ERC20_IFACE = new ethers_1.Interface([
    'event Transfer(address indexed from, address indexed to, uint256 value)',
]);
var TRANSFER_TOPIC = (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)('Transfer(address,address,uint256)'));
function padTopicAddress(addr) {
    return '0x' + addr.toLowerCase().replace(/^0x/, '').padStart(64, '0');
}
/** Cek pembayaran ke paymentAddr. Native=balance, Token=scan Transfer ke paymentAddr. */
function checkEvmPayment(args) {
    return __awaiter(this, void 0, Promise, function () {
        var rpcUrl, paymentAddr, expectedAmount, tokenMeta, fromBlock, provider, received, lastTxHash, confirmations, bal, logs, _i, logs_1, l, latest, exp;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    rpcUrl = args.rpcUrl, paymentAddr = args.paymentAddr, expectedAmount = args.expectedAmount, tokenMeta = args.tokenMeta, fromBlock = args.fromBlock;
                    provider = new ethers_1.JsonRpcProvider(rpcUrl);
                    received = 0n;
                    lastTxHash = '';
                    confirmations = 0;
                    if (!tokenMeta.isNative) return [3 /*break*/, 2];
                    return [4 /*yield*/, provider.getBalance(paymentAddr)];
                case 1:
                    bal = _a.sent();
                    received = bal; // wei
                    return [3 /*break*/, 7];
                case 2:
                    if (!tokenMeta.contractAddress)
                        throw new Error('tokenMeta.contractAddress missing for ERC-20');
                    return [4 /*yield*/, provider.getLogs({
                            address: tokenMeta.contractAddress,
                            topics: [TRANSFER_TOPIC, null, padTopicAddress(paymentAddr)],
                            fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,
                            toBlock: 'latest',
                        })];
                case 3:
                    logs = _a.sent();
                    _i = 0, logs_1 = logs;
                    _a.label = 4;
                case 4:
                    if (!(_i < logs_1.length)) return [3 /*break*/, 7];
                    l = logs_1[_i];
                    received += BigInt(l.data);
                    lastTxHash = l.transactionHash;
                    return [4 /*yield*/, provider.getBlockNumber()];
                case 5:
                    latest = _a.sent();
                    confirmations = l.blockNumber ? latest - l.blockNumber + 1 : 0;
                    _a.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 4];
                case 7:
                    exp = (0, ethers_1.parseUnits)(expectedAmount, tokenMeta.decimals);
                    if (received === 0n) {
                        return [2 /*return*/, { status: 'NONE', received: (0, ethers_1.formatUnits)(received, tokenMeta.decimals) }];
                    }
                    if (received < exp) {
                        return [2 /*return*/, { status: 'UNDERPAID', received: (0, ethers_1.formatUnits)(received, tokenMeta.decimals) }];
                    }
                    // Native: begitu saldo >= expected, anggap confirmed (atau set minConfirmations=1 di DB)
                    if (tokenMeta.isNative) {
                        return [2 /*return*/, {
                                status: 'CONFIRMED',
                                received: (0, ethers_1.formatUnits)(received, tokenMeta.decimals),
                                txHash: lastTxHash || '',
                                confirmations: tokenMeta.minConfirmations,
                            }];
                    }
                    // Token: wajib tunggu konfirmasi riil
                    if (confirmations < tokenMeta.minConfirmations) {
                        return [2 /*return*/, {
                                status: 'PENDING_CONF',
                                received: (0, ethers_1.formatUnits)(received, tokenMeta.decimals),
                                txHash: lastTxHash,
                                confirmations: confirmations,
                            }];
                    }
                    return [2 /*return*/, {
                            status: 'CONFIRMED',
                            received: (0, ethers_1.formatUnits)(received, tokenMeta.decimals),
                            txHash: lastTxHash,
                            confirmations: confirmations,
                        }];
            }
        });
    });
}
exports.checkEvmPayment = checkEvmPayment;
