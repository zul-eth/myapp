"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendEvmPayout = void 0;
// src/lib/payments/evmPayout.ts
var ethers_1 = require("ethers");
var ERC20_ABI = [
    'function decimals() view returns (uint8)',
    'function balanceOf(address) view returns (uint256)',
    'function transfer(address to, uint256 amount) returns (bool)',
];
function sendEvmPayout(_a) {
    var _b, _c, _d;
    var rpcUrl = _a.rpcUrl, privateKey = _a.privateKey, to = _a.to, amount = _a.amount, isToken = _a.isToken, token = _a.token, _e = _a.confirmations, confirmations = _e === void 0 ? 1 : _e;
    return __awaiter(this, void 0, void 0, function () {
        var provider, wallet, from, value_1, tx_1, rc_1, contract, decimals, _f, value, bal, tx, rc;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    if (!rpcUrl)
                        throw new Error('rpcUrl missing');
                    if (!privateKey)
                        throw new Error('privateKey missing');
                    if (!to)
                        throw new Error('to missing');
                    if (!amount)
                        throw new Error('amount missing');
                    provider = new ethers_1.JsonRpcProvider(rpcUrl);
                    wallet = new ethers_1.Wallet(privateKey, provider);
                    return [4 /*yield*/, wallet.getAddress()];
                case 1:
                    from = _g.sent();
                    if (!!isToken) return [3 /*break*/, 4];
                    value_1 = (0, ethers_1.parseUnits)(amount, 18);
                    return [4 /*yield*/, wallet.sendTransaction({ to: to, value: value_1 })];
                case 2:
                    tx_1 = _g.sent();
                    return [4 /*yield*/, tx_1.wait(confirmations)];
                case 3:
                    rc_1 = _g.sent();
                    return [2 /*return*/, { hash: tx_1.hash, blockNumber: (_b = rc_1 === null || rc_1 === void 0 ? void 0 : rc_1.blockNumber) !== null && _b !== void 0 ? _b : null, type: 'native' }];
                case 4:
                    // token
                    if (!(token === null || token === void 0 ? void 0 : token.contract))
                        throw new Error('token.contract missing for ERC-20 payout');
                    contract = new ethers_1.Contract(token.contract, ERC20_ABI, wallet);
                    if (!((_c = token === null || token === void 0 ? void 0 : token.decimals) !== null && _c !== void 0)) return [3 /*break*/, 5];
                    _f = _c;
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, contract.decimals()];
                case 6:
                    _f = (_g.sent()).valueOf();
                    _g.label = 7;
                case 7:
                    decimals = _f;
                    value = (0, ethers_1.parseUnits)(amount, decimals);
                    return [4 /*yield*/, contract.balanceOf(from)];
                case 8:
                    bal = _g.sent();
                    if (bal < value)
                        throw new Error('insufficient token balance for payout');
                    return [4 /*yield*/, contract.transfer(to, value)];
                case 9:
                    tx = _g.sent();
                    return [4 /*yield*/, tx.wait(confirmations)];
                case 10:
                    rc = _g.sent();
                    return [2 /*return*/, { hash: tx.hash, blockNumber: (_d = rc === null || rc === void 0 ? void 0 : rc.blockNumber) !== null && _d !== void 0 ? _d : null, type: 'erc20', decimals: decimals }];
            }
        });
    });
}
exports.sendEvmPayout = sendEvmPayout;
