"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOrderEvm = void 0;
var client_1 = require("@prisma/client");
var networkMap_1 = require("./networkMap");
var evm_1 = require("./evm");
var prisma = new client_1.PrismaClient();
function toFixedStr(n, decimals) {
    return (Math.round(n * Math.pow(10, decimals)) / Math.pow(10, decimals)).toFixed(decimals);
}
/** Jalankan validasi utk 1 order EVM dan update status-nya. */
function validateOrderEvm(orderId) {
    return __awaiter(this, void 0, void 0, function () {
        var o, cfg, opt, isToken, tokenMeta, expectedAmount, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, prisma.order.findUnique({
                        where: { id: orderId },
                        include: { payWith: true, payNetwork: true },
                    })];
                case 1:
                    o = _a.sent();
                    if (!o)
                        return [2 /*return*/, { ok: false, reason: 'order-not-found' }];
                    cfg = (0, networkMap_1.getEvmConfigByName)(o.payNetwork.name);
                    if (!(cfg === null || cfg === void 0 ? void 0 : cfg.rpc))
                        return [2 /*return*/, { ok: false, reason: 'rpc-missing' }];
                    return [4 /*yield*/, prisma.paymentOption.findFirst({
                            where: { coinId: o.payWithId, networkId: o.payNetworkId },
                        })];
                case 2:
                    opt = _a.sent();
                    isToken = !!(opt === null || opt === void 0 ? void 0 : opt.contractAddress);
                    tokenMeta = {
                        isNative: !isToken,
                        contractAddress: isToken ? String(opt.contractAddress) : undefined,
                        decimals: Number((opt === null || opt === void 0 ? void 0 : opt.decimals) || (isToken ? 6 : 18)),
                        minConfirmations: Number((opt === null || opt === void 0 ? void 0 : opt.minConfirmations) || 3),
                    };
                    expectedAmount = toFixedStr(o.amount * o.priceRate, tokenMeta.decimals);
                    return [4 /*yield*/, (0, evm_1.checkEvmPayment)({
                            rpcUrl: cfg.rpc,
                            paymentAddr: o.paymentAddr,
                            expectedAmount: expectedAmount,
                            tokenMeta: tokenMeta,
                        })];
                case 3:
                    res = _a.sent();
                    if (!(res.status === 'UNDERPAID')) return [3 /*break*/, 6];
                    if (!(o.status !== 'UNDERPAID')) return [3 /*break*/, 5];
                    return [4 /*yield*/, prisma.order.update({ where: { id: o.id }, data: { status: 'UNDERPAID' } })];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [3 /*break*/, 10];
                case 6:
                    if (!(res.status === 'PENDING_CONF')) return [3 /*break*/, 8];
                    return [4 /*yield*/, prisma.order.update({
                            where: { id: o.id },
                            data: { status: 'WAITING_CONFIRMATION', txHash: res.txHash, confirmations: res.confirmations },
                        })];
                case 7:
                    _a.sent();
                    return [3 /*break*/, 10];
                case 8:
                    if (!(res.status === 'CONFIRMED')) return [3 /*break*/, 10];
                    return [4 /*yield*/, prisma.order.update({
                            where: { id: o.id },
                            data: { status: 'CONFIRMED', txHash: res.txHash, confirmations: res.confirmations },
                        })];
                case 9:
                    _a.sent();
                    _a.label = 10;
                case 10: return [2 /*return*/, { ok: true, result: res }];
            }
        });
    });
}
exports.validateOrderEvm = validateOrderEvm;
