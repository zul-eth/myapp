"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAddressesFromWebhook = exports.addAddressesToWebhook = void 0;
var ENDPOINT = 'https://dashboard.alchemy.com/api/update-webhook-addresses';
function chunk(arr, size) {
    if (size === void 0) { size = 100; }
    var out = [];
    for (var i = 0; i < arr.length; i += size)
        out.push(arr.slice(i, i + size));
    return out;
}
function normalize(addresses) {
    return __spreadArray([], new Set((addresses || []).map(function (a) { return (a || '').toLowerCase(); }).filter(Boolean)), true);
}
function callAlchemy(payload, retries) {
    if (retries === void 0) { retries = 2; }
    return __awaiter(this, void 0, void 0, function () {
        var token, res, _a, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    token = process.env.ALCHEMY_NOTIFY_TOKEN;
                    if (!token)
                        throw new Error('ALCHEMY_NOTIFY_TOKEN missing (Auth Token dari halaman Webhooks)');
                    return [4 /*yield*/, fetch(ENDPOINT, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Alchemy-Token': token,
                            },
                            body: JSON.stringify(payload),
                        })];
                case 1:
                    res = _e.sent();
                    if (!!res.ok) return [3 /*break*/, 5];
                    if (!((res.status === 429 || res.status >= 500) && retries > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 700 * (3 - retries)); })];
                case 2:
                    _e.sent();
                    return [2 /*return*/, callAlchemy(payload, retries - 1)];
                case 3:
                    _a = Error.bind;
                    _c = (_b = "Alchemy ".concat(res.status, ": ")).concat;
                    return [4 /*yield*/, res.text()];
                case 4: throw new (_a.apply(Error, [void 0, _c.apply(_b, [_e.sent()])]))();
                case 5:
                    _e.trys.push([5, 7, , 9]);
                    return [4 /*yield*/, res.json()];
                case 6: return [2 /*return*/, _e.sent()];
                case 7:
                    _d = _e.sent();
                    return [4 /*yield*/, res.text()];
                case 8: return [2 /*return*/, _e.sent()];
                case 9: return [2 /*return*/];
            }
        });
    });
}
function addAddressesToWebhook(webhookId, addresses) {
    return __awaiter(this, void 0, void 0, function () {
        var add, _i, _a, batch;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!webhookId)
                        throw new Error('webhookId is empty');
                    add = normalize(addresses);
                    if (!add.length)
                        return [2 /*return*/];
                    _i = 0, _a = chunk(add, 100);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    batch = _a[_i];
                    return [4 /*yield*/, callAlchemy({ webhook_id: webhookId, addresses_to_add: batch, addresses_to_remove: [] })];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.addAddressesToWebhook = addAddressesToWebhook;
function removeAddressesFromWebhook(webhookId, addresses) {
    return __awaiter(this, void 0, void 0, function () {
        var rem, _i, _a, batch;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!webhookId)
                        throw new Error('webhookId is empty');
                    rem = normalize(addresses);
                    if (!rem.length)
                        return [2 /*return*/];
                    _i = 0, _a = chunk(rem, 100);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    batch = _a[_i];
                    return [4 /*yield*/, callAlchemy({ webhook_id: webhookId, addresses_to_add: [], addresses_to_remove: batch })];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.removeAddressesFromWebhook = removeAddressesFromWebhook;
