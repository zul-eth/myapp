"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAddressesFromWebhook = exports.addAddressesToWebhook = exports.replaceWebhookAddresses = void 0;
// src/lib/payments/notify.ts
require("server-only");
var BASE = 'https://dashboard.alchemy.com/api';
var ENDPOINT_PATCH = "".concat(BASE, "/update-webhook-addresses"); // PATCH
var ENDPOINT_PUT = "".concat(BASE, "/update-webhook-addresses"); // PUT (replace)
var TOKEN = process.env.ALCHEMY_NOTIFY_TOKEN || '';
function chunk(arr, size) {
    if (size === void 0) { size = 100; }
    var out = [];
    for (var i = 0; i < arr.length; i += size)
        out.push(arr.slice(i, i + size));
    return out;
}
function uniqNormalized(addresses) {
    var seen = new Set();
    var out = [];
    for (var _i = 0, _a = addresses || []; _i < _a.length; _i++) {
        var a = _a[_i];
        var raw = (a || '').trim();
        if (!raw)
            continue;
        var key = raw.toLowerCase();
        if (seen.has(key))
            continue;
        seen.add(key);
        out.push(raw); // kirim bentuk asli (Alchemy terima checksum/lowercase)
    }
    return out;
}
function callAlchemyPATCH(payload) {
    return __awaiter(this, void 0, Promise, function () {
        var res, text, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!TOKEN)
                        throw new Error('ALCHEMY_NOTIFY_TOKEN kosong');
                    return [4 /*yield*/, fetch(ENDPOINT_PATCH, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json', 'X-Alchemy-Token': TOKEN },
                            body: JSON.stringify(payload),
                        })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.text()];
                case 2:
                    text = _a.sent();
                    json = null;
                    try {
                        json = JSON.parse(text);
                    }
                    catch (_b) { }
                    if (!res.ok) {
                        throw new Error("Alchemy ".concat(res.status, ": ").concat(text || 'unknown error', " ") +
                            "(webhook_id=".concat(payload.webhook_id, ", add=").concat(payload.addresses_to_add.length, ", rem=").concat(payload.addresses_to_remove.length, ")"));
                    }
                    console.log('Alchemy PATCH ok:', {
                        webhook_id: payload.webhook_id,
                        add: payload.addresses_to_add.length,
                        remove: payload.addresses_to_remove.length,
                        body: json !== null && json !== void 0 ? json : text,
                    });
                    return [2 /*return*/, json !== null && json !== void 0 ? json : text];
            }
        });
    });
}
/** Ganti SELURUH daftar alamat di webhook (lebih agresif & pasti sinkron). */
function replaceWebhookAddresses(webhookId, addresses) {
    return __awaiter(this, void 0, void 0, function () {
        var list, res, text;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!TOKEN)
                        throw new Error('ALCHEMY_NOTIFY_TOKEN kosong');
                    list = uniqNormalized(addresses);
                    return [4 /*yield*/, fetch(ENDPOINT_PUT, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json', 'X-Alchemy-Token': TOKEN },
                            body: JSON.stringify({ webhook_id: webhookId, addresses: list }),
                        })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.text()];
                case 2:
                    text = _a.sent();
                    if (!res.ok) {
                        throw new Error("Alchemy ".concat(res.status, ": ").concat(text || 'unknown error', " (replace webhook_id=").concat(webhookId, ", size=").concat(list.length, ")"));
                    }
                    console.log('Alchemy PUT (replace) ok:', { webhook_id: webhookId, size: list.length, body: text });
                    return [2 /*return*/];
            }
        });
    });
}
exports.replaceWebhookAddresses = replaceWebhookAddresses;
function addAddressesToWebhook(webhookId, addresses) {
    return __awaiter(this, void 0, void 0, function () {
        var add, _i, _a, batch;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!webhookId)
                        throw new Error('webhookId kosong');
                    add = uniqNormalized(addresses);
                    if (!add.length)
                        return [2 /*return*/];
                    _i = 0, _a = chunk(add, 100);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    batch = _a[_i];
                    return [4 /*yield*/, callAlchemyPATCH({ webhook_id: webhookId, addresses_to_add: batch, addresses_to_remove: [] })];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.addAddressesToWebhook = addAddressesToWebhook;
function removeAddressesFromWebhook(webhookId, addresses) {
    return __awaiter(this, void 0, void 0, function () {
        var rem, _i, _a, batch;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!webhookId)
                        throw new Error('webhookId kosong');
                    rem = uniqNormalized(addresses);
                    if (!rem.length)
                        return [2 /*return*/];
                    _i = 0, _a = chunk(rem, 100);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    batch = _a[_i];
                    return [4 /*yield*/, callAlchemyPATCH({ webhook_id: webhookId, addresses_to_add: [], addresses_to_remove: batch })];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.removeAddressesFromWebhook = removeAddressesFromWebhook;
