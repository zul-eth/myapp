"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.allocatePaymentAddressByChain = void 0;
// src/server/alloc/hdAllocator.ts
var client_1 = require("@prisma/client");
var universal_1 = require("@/lib/hdwallet/universal");
var chainMap_1 = require("@/lib/hdwallet/chainMap");
var prisma = new client_1.PrismaClient();
/**
 * Alokasikan 1 alamat pembayaran berbasis CHAIN (evm/tron/solana).
 * - increment atomik HdCursor.nextIndex
 * - derive alamat dari index
 * - catat ledger ke WalletPoolLegacy (isUsed=true, assignedOrder=orderId)
 * - set paymentAddr pada Order
 */
function allocatePaymentAddressByChain(params) {
    return __awaiter(this, void 0, void 0, function () {
        var payWithId, payNetworkId, orderId, _a, payCoin, payNetwork, order, _b, dbChain, runtimeChain, mnemonic, attempt, result, e_1;
        var _this = this;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    payWithId = params.payWithId, payNetworkId = params.payNetworkId, orderId = params.orderId;
                    return [4 /*yield*/, Promise.all([
                            prisma.coin.findUnique({ where: { id: payWithId } }),
                            prisma.network.findUnique({ where: { id: payNetworkId } }),
                            prisma.order.findUnique({ where: { id: orderId } }),
                        ])];
                case 1:
                    _a = _c.sent(), payCoin = _a[0], payNetwork = _a[1], order = _a[2];
                    if (!payCoin || !payNetwork)
                        throw new Error('Coin/Network not found');
                    if (!order)
                        throw new Error('Order not found');
                    _b = (0, chainMap_1.mapNetworkToChains)(payNetwork.name), dbChain = _b.dbChain, runtimeChain = _b.runtimeChain;
                    mnemonic = process.env.MNEMONIC;
                    if (!mnemonic)
                        throw new Error('MNEMONIC belum dikonfigurasi');
                    attempt = 0;
                    _c.label = 2;
                case 2:
                    if (!(attempt < 5)) return [3 /*break*/, 7];
                    _c.label = 3;
                case 3:
                    _c.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, prisma.$transaction(function (tx) { return __awaiter(_this, void 0, void 0, function () {
                            var cur, indexAssigned, address;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, tx.hdCursor.upsert({
                                            where: { chain: dbChain },
                                            update: { nextIndex: { increment: 1 } },
                                            create: { chain: dbChain, nextIndex: 1 },
                                        })];
                                    case 1:
                                        cur = _a.sent();
                                        indexAssigned = cur.nextIndex - 1;
                                        return [4 /*yield*/, (0, universal_1.generateAddress)(runtimeChain, mnemonic, indexAssigned)];
                                    case 2:
                                        address = _a.sent();
                                        // 3) ledger + set order
                                        return [4 /*yield*/, tx.walletPoolLegacy.create({
                                                data: {
                                                    chain: dbChain,
                                                    derivationIndex: indexAssigned,
                                                    address: address,
                                                    isUsed: true,
                                                    assignedOrder: orderId,
                                                },
                                            })];
                                    case 3:
                                        // 3) ledger + set order
                                        _a.sent();
                                        return [4 /*yield*/, tx.order.update({
                                                where: { id: orderId },
                                                data: { paymentAddr: address },
                                            })];
                                    case 4:
                                        _a.sent();
                                        return [2 /*return*/, { chain: dbChain, indexAssigned: indexAssigned, address: address }];
                                }
                            });
                        }); })];
                case 4:
                    result = _c.sent();
                    return [2 /*return*/, result]; // success
                case 5:
                    e_1 = _c.sent();
                    if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === 'P2002')
                        return [3 /*break*/, 6]; // unique violation â†’ retry
                    throw e_1;
                case 6:
                    attempt++;
                    return [3 /*break*/, 2];
                case 7: throw new Error('Gagal mengalokasikan alamat unik; coba lagi');
            }
        });
    });
}
exports.allocatePaymentAddressByChain = allocatePaymentAddressByChain;
