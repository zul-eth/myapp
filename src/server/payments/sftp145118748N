"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAsset = void 0;
require("server-only");
var client_1 = require("@prisma/client");
var prisma = new client_1.PrismaClient();
function resolveAsset(coinId, networkId) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, Promise, function () {
        var cn, family, symbol, decimals;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0: return [4 /*yield*/, prisma.coinNetwork.findFirst({
                        where: { coinId: coinId, networkId: networkId },
                        include: { network: true, coin: true },
                    })];
                case 1:
                    cn = _g.sent();
                    if (!cn)
                        throw new Error('CoinNetwork metadata not found');
                    family = cn.network.family;
                    symbol = (_a = cn.symbolOverride) !== null && _a !== void 0 ? _a : cn.coin.symbol;
                    decimals = (_b = cn.decimals) !== null && _b !== void 0 ? _b : (family === 'EVM' ? 18 : family === 'SOLANA' ? 9 : 6);
                    return [2 /*return*/, {
                            family: family,
                            assetType: cn.assetType,
                            decimals: decimals,
                            symbol: symbol,
                            contract: (_c = cn.contractAddress) !== null && _c !== void 0 ? _c : undefined,
                            memoKind: (_d = cn.memoKind) !== null && _d !== void 0 ? _d : 'NONE',
                            memoLabel: (_e = cn.memoLabel) !== null && _e !== void 0 ? _e : undefined,
                            memoRegex: (_f = cn.memoRegex) !== null && _f !== void 0 ? _f : undefined,
                        }];
            }
        });
    });
}
exports.resolveAsset = resolveAsset;
