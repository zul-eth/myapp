"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = exports.GET = void 0;
// List + Create Orders
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var chainMap_1 = require("@/lib/hdwallet/chainMap");
var universal_1 = require("@/lib/hdwallet/universal");
// ⬇️ pastikan path import sesuai file helper kamu
var notify_1 = require("@/lib/payments/notify");
var networkMap_1 = require("@/lib/payments/networkMap");
var prisma = new client_1.PrismaClient();
var PAYMENT_WINDOW_MINUTES = 15;
function mapNetworkToDbChain(networkName) {
    var n = (networkName || '').trim().toLowerCase();
    if (n.includes('tron') || n === 'trx')
        return 'tron';
    if (n.includes('solana') || n === 'sol')
        return 'solana';
    return 'evm';
}
// GET /api/orders
function GET(req) {
    return __awaiter(this, void 0, void 0, function () {
        var searchParams, q, status, page, limit, skip, where, _a, total, data, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    searchParams = new URL(req.url).searchParams;
                    q = searchParams.get('q') || '';
                    status = (searchParams.get('status') || '');
                    page = Math.max(1, parseInt(searchParams.get('page') || '1', 10));
                    limit = Math.max(1, Math.min(100, parseInt(searchParams.get('limit') || '20', 10)));
                    skip = (page - 1) * limit;
                    where = {
                        AND: [
                            status ? { status: status } : {},
                            q
                                ? {
                                    OR: [
                                        { id: { contains: q, mode: 'insensitive' } },
                                        { receivingAddr: { contains: q, mode: 'insensitive' } },
                                        { paymentAddr: { contains: q, mode: 'insensitive' } },
                                        { txHash: { contains: q, mode: 'insensitive' } },
                                    ],
                                }
                                : {},
                        ],
                    };
                    return [4 /*yield*/, Promise.all([
                            prisma.order.count({ where: where }),
                            prisma.order.findMany({
                                where: where,
                                orderBy: { createdAt: 'desc' },
                                skip: skip,
                                take: limit,
                                include: { coinToBuy: true, buyNetwork: true, payWith: true, payNetwork: true },
                            }),
                        ])];
                case 1:
                    _a = _b.sent(), total = _a[0], data = _a[1];
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'OK', data: data, page: page, limit: limit, total: total })];
                case 2:
                    e_1 = _b.sent();
                    console.error('GET /api/orders error:', e_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: (e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || 'Internal server error' }, { status: 500 })];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.GET = GET;
// POST /api/orders
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var body, _a, coinToBuyId, buyNetworkId, payWithId, payNetworkId, amount, receivingAddr, payNet, dbChain, runtimeChain, rateRow, wallet, MNEMONIC, cursor, index, address, expiresAt, order, cfg, e_2, e_3;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 17, , 18]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    body = _b.sent();
                    _a = body || {}, coinToBuyId = _a.coinToBuyId, buyNetworkId = _a.buyNetworkId, payWithId = _a.payWithId, payNetworkId = _a.payNetworkId, amount = _a.amount, receivingAddr = _a.receivingAddr;
                    if (!coinToBuyId || !buyNetworkId || !payWithId || !payNetworkId || !amount || !receivingAddr) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Data tidak lengkap' }, { status: 400 })];
                    }
                    return [4 /*yield*/, prisma.network.findUnique({ where: { id: payNetworkId } })];
                case 2:
                    payNet = _b.sent();
                    if (!payNet)
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Network pembayaran tidak ditemukan' }, { status: 404 })];
                    dbChain = mapNetworkToDbChain(payNet.name);
                    runtimeChain = (0, chainMap_1.dbToRuntimeChain)(dbChain);
                    return [4 /*yield*/, prisma.exchangeRate.findFirst({
                            where: { buyCoinId: coinToBuyId, buyNetworkId: buyNetworkId, payCoinId: payWithId, payNetworkId: payNetworkId },
                        })];
                case 3:
                    rateRow = _b.sent();
                    if (!rateRow)
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Rate tidak ditemukan' }, { status: 404 })];
                    return [4 /*yield*/, prisma.walletPoolLegacy.findFirst({
                            where: { chain: dbChain, isUsed: false },
                            orderBy: { derivationIndex: 'asc' },
                        })];
                case 4:
                    wallet = _b.sent();
                    if (!!wallet) return [3 /*break*/, 9];
                    MNEMONIC = process.env.MNEMONIC;
                    if (!MNEMONIC)
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'MNEMONIC belum diset' }, { status: 500 })];
                    return [4 /*yield*/, prisma.hdCursor.upsert({
                            where: { chain: dbChain },
                            update: {},
                            create: { chain: dbChain, nextIndex: 0 },
                        })];
                case 5:
                    cursor = _b.sent();
                    index = cursor.nextIndex;
                    return [4 /*yield*/, (0, universal_1.generateAddress)(runtimeChain, MNEMONIC, index)];
                case 6:
                    address = _b.sent();
                    return [4 /*yield*/, prisma.walletPoolLegacy.create({
                            data: { chain: dbChain, derivationIndex: index, address: address, isUsed: false },
                        })];
                case 7:
                    wallet = _b.sent();
                    // advance cursor
                    return [4 /*yield*/, prisma.hdCursor.update({
                            where: { chain: dbChain },
                            data: { nextIndex: { increment: 1 } },
                        })];
                case 8:
                    // advance cursor
                    _b.sent();
                    _b.label = 9;
                case 9:
                    expiresAt = new Date(Date.now() + PAYMENT_WINDOW_MINUTES * 60 * 1000);
                    return [4 /*yield*/, prisma.order.create({
                            data: {
                                coinToBuyId: coinToBuyId,
                                buyNetworkId: buyNetworkId,
                                payWithId: payWithId,
                                payNetworkId: payNetworkId,
                                amount: amount,
                                priceRate: rateRow.rate,
                                receivingAddr: receivingAddr,
                                paymentAddr: wallet.address,
                                paymentMemo: null,
                                txHash: null,
                                confirmations: 0,
                                status: 'WAITING_PAYMENT',
                                expiresAt: expiresAt,
                            },
                            include: { coinToBuy: true, buyNetwork: true, payWith: true, payNetwork: true },
                        })];
                case 10:
                    order = _b.sent();
                    _b.label = 11;
                case 11:
                    _b.trys.push([11, 14, , 15]);
                    cfg = (0, networkMap_1.getEvmConfigByName)(order.payNetwork.name);
                    if (!((cfg === null || cfg === void 0 ? void 0 : cfg.webhookId) && process.env.ALCHEMY_NOTIFY_TOKEN)) return [3 /*break*/, 13];
                    return [4 /*yield*/, (0, notify_1.addAddressesToWebhook)(cfg.webhookId, [order.paymentAddr])];
                case 12:
                    _b.sent();
                    _b.label = 13;
                case 13: return [3 /*break*/, 15];
                case 14:
                    e_2 = _b.sent();
                    console.warn('register webhook address failed:', e_2);
                    return [3 /*break*/, 15];
                case 15: 
                // tandai wallet sudah dipakai & assign ke order
                return [4 /*yield*/, prisma.walletPoolLegacy.update({
                        where: { id: wallet.id },
                        data: { isUsed: true, assignedOrder: order.id },
                    })];
                case 16:
                    // tandai wallet sudah dipakai & assign ke order
                    _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Order created', data: order }, { status: 201 })];
                case 17:
                    e_3 = _b.sent();
                    console.error('POST /api/orders error:', e_3);
                    return [2 /*return*/, server_1.NextResponse.json({ message: (e_3 === null || e_3 === void 0 ? void 0 : e_3.message) || 'Internal server error' }, { status: 500 })];
                case 18: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
