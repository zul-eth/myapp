"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = exports.GET = void 0;
// src/app/api/orders/route.ts
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var hdAllocator_1 = require("@/server/alloc/hdAllocator");
var prisma = new client_1.PrismaClient();
/**
 * GET /api/orders?status&limit&q
 */
function GET(req) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var searchParams, status, q, limit, where, orders, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    searchParams = new URL(req.url).searchParams;
                    status = searchParams.get('status');
                    q = (_a = searchParams.get('q')) !== null && _a !== void 0 ? _a : undefined;
                    limit = Math.min(Number(searchParams.get('limit') || 50), 200);
                    where = {};
                    if (status && status in client_1.OrderStatus)
                        where.status = status;
                    if (q)
                        where.id = { contains: q, mode: 'insensitive' };
                    return [4 /*yield*/, prisma.order.findMany({
                            where: where,
                            orderBy: { createdAt: 'desc' },
                            take: limit,
                            include: {
                                // sesuai schema kamu
                                coinToBuy: true,
                                buyNetwork: true,
                                payWith: true,
                                payNetwork: true,
                            },
                        })];
                case 1:
                    orders = _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json(orders)];
                case 2:
                    error_1 = _b.sent();
                    console.error('GET /api/orders error:', error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Internal server error' }, { status: 500 })];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.GET = GET;
/**
 * POST /api/orders
 * body: { coinToBuyId, buyNetworkId, payWithId, payNetworkId, amount, receivingAddr }
 * Buat order + alokasikan alamat pembayaran berbasis chain (evm/tron/solana).
 */
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var body, _a, coinToBuyId, buyNetworkId, payWithId, payNetworkId, amount, receivingAddr, rateEntry, priceRate, created, order, error_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 6, , 7]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    body = _b.sent();
                    _a = body || {}, coinToBuyId = _a.coinToBuyId, buyNetworkId = _a.buyNetworkId, payWithId = _a.payWithId, payNetworkId = _a.payNetworkId, amount = _a.amount, receivingAddr = _a.receivingAddr;
                    // validasi dasar
                    if (!coinToBuyId || !buyNetworkId || !payWithId || !payNetworkId || !amount || !receivingAddr) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Field wajib belum lengkap' }, { status: 400 })];
                    }
                    return [4 /*yield*/, prisma.exchangeRate.findFirst({
                            where: { buyCoinId: coinToBuyId, buyNetworkId: buyNetworkId, payCoinId: payWithId, payNetworkId: payNetworkId },
                            select: { rate: true },
                        })];
                case 2:
                    rateEntry = _b.sent();
                    if (!rateEntry) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Rate tidak ditemukan untuk pasangan ini' }, { status: 400 })];
                    }
                    priceRate = Number(rateEntry.rate);
                    if (!Number.isFinite(priceRate) || priceRate <= 0) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Rate tidak valid' }, { status: 400 })];
                    }
                    return [4 /*yield*/, prisma.order.create({
                            data: {
                                coinToBuyId: coinToBuyId,
                                buyNetworkId: buyNetworkId,
                                payWithId: payWithId,
                                payNetworkId: payNetworkId,
                                amount: Number(amount),
                                priceRate: priceRate,
                                receivingAddr: receivingAddr,
                                status: 'WAITING_PAYMENT',
                                // optional: set expiresAt
                                // expiresAt: new Date(Date.now() + 30 * 60 * 1000),
                            },
                        })];
                case 3:
                    created = _b.sent();
                    // alokasikan alamat by chain (atomic di dalam allocator)
                    return [4 /*yield*/, (0, hdAllocator_1.allocatePaymentAddressByChain)({
                            payWithId: payWithId,
                            payNetworkId: payNetworkId,
                            orderId: created.id,
                        })];
                case 4:
                    // alokasikan alamat by chain (atomic di dalam allocator)
                    _b.sent();
                    return [4 /*yield*/, prisma.order.findUnique({
                            where: { id: created.id },
                            include: {
                                coinToBuy: true,
                                buyNetwork: true,
                                payWith: true,
                                payNetwork: true,
                            },
                        })];
                case 5:
                    order = _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Order created', order: order })];
                case 6:
                    error_2 = _b.sent();
                    console.error('POST /api/orders error:', error_2);
                    return [2 /*return*/, server_1.NextResponse.json({ message: (error_2 === null || error_2 === void 0 ? void 0 : error_2.message) || 'Internal server error' }, { status: 500 })];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
