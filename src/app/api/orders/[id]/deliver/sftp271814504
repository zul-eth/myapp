"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
// src/app/api/orders/[id]/deliver/route.ts
var server_1 = require("next/server");
var client_1 = require("@prisma/client");
var ethers_1 = require("ethers");
var networkMap_1 = require("@/lib/payments/networkMap");
var notify_1 = require("@/lib/payments/notify");
var prisma = new client_1.PrismaClient();
var ERC20_ABI = [
    'function decimals() view returns (uint8)',
    'function balanceOf(address) view returns (uint256)',
    'function transfer(address to, uint256 amount) returns (bool)',
];
function toFixedStr(n, decimals) {
    return (Math.round(n * Math.pow(10, decimals)) / Math.pow(10, decimals)).toFixed(decimals);
}
function POST(_req, ctx) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var id, order_1, buyCfg, provider, wallet, from, buyOpt, isToken, decimals, contractAddr, lock, fresh, amountStr, txHash, value, tx, rc, contract, _c, value, bal, tx, rc, e_1;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 20, , 21]);
                    return [4 /*yield*/, ctx.params];
                case 1:
                    id = (_d.sent()).id;
                    return [4 /*yield*/, prisma.order.findUnique({
                            where: { id: id },
                            include: { coinToBuy: true, buyNetwork: true, payWith: true, payNetwork: true },
                        })];
                case 2:
                    order_1 = _d.sent();
                    if (!order_1)
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Order not found' }, { status: 404 })];
                    // Idempotent guard
                    if (order_1.status === 'COMPLETED') {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Already completed', data: { payoutHash: (_a = order_1.payoutHash) !== null && _a !== void 0 ? _a : null } })];
                    }
                    if (!order_1.payoutHash) return [3 /*break*/, 4];
                    return [4 /*yield*/, prisma.order.update({ where: { id: id }, data: { status: 'COMPLETED' } })];
                case 3:
                    _d.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Marked completed (hash existed)', data: { payoutHash: order_1.payoutHash } })];
                case 4:
                    if (order_1.status !== 'CONFIRMED') {
                        return [2 /*return*/, server_1.NextResponse.json({ message: "Order status must be CONFIRMED to deliver (current: ".concat(order_1.status, ")") }, { status: 400 })];
                    }
                    buyCfg = (0, networkMap_1.getEvmConfigByName)(order_1.buyNetwork.name);
                    if (!(buyCfg === null || buyCfg === void 0 ? void 0 : buyCfg.rpc))
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'BUY network RPC missing' }, { status: 400 })];
                    if (!(buyCfg === null || buyCfg === void 0 ? void 0 : buyCfg.payoutPk))
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Payout private key missing for BUY network' }, { status: 400 })];
                    provider = new ethers_1.JsonRpcProvider(buyCfg.rpc);
                    wallet = new ethers_1.Wallet(buyCfg.payoutPk, provider);
                    return [4 /*yield*/, wallet.getAddress()];
                case 5:
                    from = _d.sent();
                    return [4 /*yield*/, prisma.paymentOption.findFirst({
                            where: { coinId: order_1.coinToBuyId, networkId: order_1.buyNetworkId },
                            select: { contractAddress: true, decimals: true },
                        })];
                case 6:
                    buyOpt = _d.sent();
                    isToken = !!(buyOpt === null || buyOpt === void 0 ? void 0 : buyOpt.contractAddress);
                    decimals = Number((buyOpt === null || buyOpt === void 0 ? void 0 : buyOpt.decimals) || (isToken ? 6 : 18));
                    contractAddr = isToken ? String(buyOpt.contractAddress) : undefined;
                    return [4 /*yield*/, prisma.order.updateMany({
                            where: { id: id, payoutAt: null, payoutHash: null, status: 'CONFIRMED' },
                            data: { payoutAt: new Date() },
                        })];
                case 7:
                    lock = _d.sent();
                    if (!(lock.count === 0)) return [3 /*break*/, 9];
                    return [4 /*yield*/, prisma.order.findUnique({ where: { id: id }, select: { status: true, payoutHash: true } })];
                case 8:
                    fresh = _d.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Already processing', data: { status: fresh === null || fresh === void 0 ? void 0 : fresh.status, payoutHash: (_b = fresh === null || fresh === void 0 ? void 0 : fresh.payoutHash) !== null && _b !== void 0 ? _b : null } }, { status: 200 })];
                case 9:
                    amountStr = toFixedStr(Number(order_1.amount), decimals);
                    txHash = '';
                    if (!!isToken) return [3 /*break*/, 12];
                    value = (0, ethers_1.parseUnits)(amountStr, decimals);
                    return [4 /*yield*/, wallet.sendTransaction({ to: order_1.receivingAddr, value: value })];
                case 10:
                    tx = _d.sent();
                    return [4 /*yield*/, tx.wait(1)];
                case 11:
                    rc = _d.sent();
                    txHash = tx.hash;
                    if (!rc)
                        throw new Error('Native payout tx not confirmed');
                    return [3 /*break*/, 18];
                case 12:
                    contract = new ethers_1.Contract(contractAddr, ERC20_ABI, wallet);
                    if (!!(buyOpt === null || buyOpt === void 0 ? void 0 : buyOpt.decimals)) return [3 /*break*/, 14];
                    _c = Number;
                    return [4 /*yield*/, contract.decimals()];
                case 13:
                    // fallback ambil decimals dari kontrak
                    decimals = _c.apply(void 0, [_d.sent()]);
                    _d.label = 14;
                case 14:
                    value = (0, ethers_1.parseUnits)(amountStr, decimals);
                    return [4 /*yield*/, contract.balanceOf(from)];
                case 15:
                    bal = _d.sent();
                    if (bal < value) {
                        throw new Error("Insufficient token balance: have ".concat(bal.toString(), ", need ").concat(value.toString()));
                    }
                    return [4 /*yield*/, contract.transfer(order_1.receivingAddr, value)];
                case 16:
                    tx = _d.sent();
                    return [4 /*yield*/, tx.wait(1)];
                case 17:
                    rc = _d.sent();
                    txHash = tx.hash;
                    if (!rc)
                        throw new Error('ERC-20 payout tx not confirmed');
                    _d.label = 18;
                case 18: 
                // 7) Simpan hash & tandai selesai
                return [4 /*yield*/, prisma.order.update({
                        where: { id: id },
                        data: {
                            status: 'COMPLETED',
                            payoutHash: txHash,
                            // payoutAt sudah di-set saat lock; bisa diperbarui ke waktu final jika mau
                        },
                    })];
                case 19:
                    // 7) Simpan hash & tandai selesai
                    _d.sent();
                    // 8) (Opsional) Bersihkan alamat pantauan di webhook PAY network (alamat pembayaran)
                    //    Jalankan async tanpa blocking respons
                    queueMicrotask(function () {
                        try {
                            var payCfg = (0, networkMap_1.getEvmConfigByName)(order_1.payNetwork.name);
                            if ((payCfg === null || payCfg === void 0 ? void 0 : payCfg.webhookId) && process.env.ALCHEMY_NOTIFY_TOKEN) {
                                void (0, notify_1.removeAddressesFromWebhook)(payCfg.webhookId, [order_1.paymentAddr]);
                            }
                        }
                        catch (_a) {
                            // diamkan; jangan ganggu flow payout
                        }
                    });
                    return [2 /*return*/, server_1.NextResponse.json({
                            message: 'Delivered',
                            data: { payoutHash: txHash, type: isToken ? 'erc20' : 'native' },
                        })];
                case 20:
                    e_1 = _d.sent();
                    console.error('POST /api/orders/[id]/deliver error:', e_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: (e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || 'Internal server error' }, { status: 500 })];
                case 21: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
