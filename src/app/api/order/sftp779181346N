"use strict";
//src/app/api/orders/route.ts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var prisma = new client_1.PrismaClient();
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var body, coinToBuyId, buyNetworkId, payWithId, payNetworkId, receivingAddr, amount, priceRate, isValidPayment, wallet, order, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 7]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    body = _a.sent();
                    coinToBuyId = body.coinToBuyId, buyNetworkId = body.buyNetworkId, payWithId = body.payWithId, payNetworkId = body.payNetworkId, receivingAddr = body.receivingAddr, amount = body.amount, priceRate = body.priceRate;
                    return [4 /*yield*/, prisma.paymentOption.findFirst({
                            where: {
                                coinId: payWithId,
                                networkId: payNetworkId,
                                isActive: true
                            }
                        })];
                case 2:
                    isValidPayment = _a.sent();
                    if (!isValidPayment) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Metode pembayaran tidak valid' }, { status: 400 })];
                    }
                    return [4 /*yield*/, prisma.walletPool.findFirst({
                            where: {
                                coinId: payWithId,
                                networkId: payNetworkId,
                                isUsed: false
                            }
                        })];
                case 3:
                    wallet = _a.sent();
                    if (!wallet) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Alamat pembayaran tidak tersedia' }, { status: 500 })];
                    }
                    // Tandai wallet sebagai digunakan
                    return [4 /*yield*/, prisma.walletPool.update({
                            where: { id: wallet.id },
                            data: {
                                isUsed: true,
                                assignedOrder: wallet.id
                            }
                        })];
                case 4:
                    // Tandai wallet sebagai digunakan
                    _a.sent();
                    return [4 /*yield*/, prisma.order.create({
                            data: {
                                coinToBuyId: coinToBuyId,
                                buyNetworkId: buyNetworkId,
                                payWithId: payWithId,
                                payNetworkId: payNetworkId,
                                receivingAddr: receivingAddr,
                                amount: amount,
                                priceRate: priceRate,
                                paymentAddr: wallet.address,
                                status: client_1.OrderStatus.WAITING_PAYMENT
                            }
                        })];
                case 5:
                    order = _a.sent();
                    return [2 /*return*/, server_1.NextResponse.json(order)];
                case 6:
                    error_1 = _a.sent();
                    console.error('Error creating order:', error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Gagal membuat order' }, { status: 500 })];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
