"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var chainMap_1 = require("@/lib/hdwallet/chainMap");
var universal_1 = require("@/lib/hdwallet/universal");
var prisma = new client_1.PrismaClient();
/**
 * POST /api/wallet-pools/derive
 * body: { chain: 'evm'|'tron'|'solana', count?: number }
 * Generate N alamat dan catat ke WalletPoolLegacy (isUsed=false, belum assigned).
 */
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, chain_1, count, n_1, mnemonic_1, runtimeChain_1, result, error_1;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    _a = _b.sent(), chain_1 = _a.chain, count = _a.count;
                    if (!chain_1 || !['evm', 'tron', 'solana'].includes(chain_1)) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'chain harus evm|tron|solana' }, { status: 400 })];
                    }
                    n_1 = Math.max(1, Math.min(Number(count || 1), 100));
                    mnemonic_1 = process.env.MNEMONIC;
                    if (!mnemonic_1)
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'MNEMONIC belum dikonfigurasi' }, { status: 500 })];
                    runtimeChain_1 = (0, chainMap_1.dbToRuntimeChain)(chain_1);
                    return [4 /*yield*/, prisma.$transaction(function (tx) { return __awaiter(_this, void 0, void 0, function () {
                            var cur, start, targets, created, _i, targets_1, idx, addr, row, e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, tx.hdCursor.upsert({
                                            where: { chain: chain_1 },
                                            update: { nextIndex: { increment: n_1 } },
                                            create: { chain: chain_1, nextIndex: n_1 },
                                        })];
                                    case 1:
                                        cur = _a.sent();
                                        start = cur.nextIndex - n_1;
                                        targets = Array.from({ length: n_1 }, function (_, i) { return start + i; });
                                        created = [];
                                        _i = 0, targets_1 = targets;
                                        _a.label = 2;
                                    case 2:
                                        if (!(_i < targets_1.length)) return [3 /*break*/, 8];
                                        idx = targets_1[_i];
                                        return [4 /*yield*/, (0, universal_1.generateAddress)(runtimeChain_1, mnemonic_1, idx)];
                                    case 3:
                                        addr = _a.sent();
                                        _a.label = 4;
                                    case 4:
                                        _a.trys.push([4, 6, , 7]);
                                        return [4 /*yield*/, tx.walletPoolLegacy.create({
                                                data: {
                                                    chain: chain_1,
                                                    derivationIndex: idx,
                                                    address: addr,
                                                    isUsed: false,
                                                    assignedOrder: null,
                                                },
                                            })];
                                    case 5:
                                        row = _a.sent();
                                        created.push(row);
                                        return [3 /*break*/, 7];
                                    case 6:
                                        e_1 = _a.sent();
                                        if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === 'P2002') {
                                            // sudah ada (race) â€” lewati; index berikutnya masih tercatat di cursor
                                            return [3 /*break*/, 7];
                                        }
                                        throw e_1;
                                    case 7:
                                        _i++;
                                        return [3 /*break*/, 2];
                                    case 8: return [2 /*return*/, created];
                                }
                            });
                        }); })];
                case 2:
                    result = _b.sent();
                    if (result.length === 0) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Tidak bisa generate alamat baru' }, { status: 500 })];
                    }
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Wallets generated', wallets: result })];
                case 3:
                    error_1 = _b.sent();
                    console.error('POST /api/wallet-pools/derive error:', error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Internal server error' }, { status: 500 })];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
