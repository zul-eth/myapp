"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = exports.GET = void 0;
// src/app/api/rates/route.ts
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var prisma = new client_1.PrismaClient();
/**
 * GET /api/rates
 * Query:
 * - q?: string   -> cari di coin.symbol / coin.name / network.name / id
 *
 * Response: ExchangeRate[] (array langsung), include relasi.
 */
function GET(req) {
    return __awaiter(this, void 0, void 0, function () {
        var searchParams, q, where, rates, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    searchParams = new URL(req.url).searchParams;
                    q = searchParams.get('q') || undefined;
                    where = {};
                    if (q) {
                        where.OR = [
                            { buyCoin: { symbol: { contains: q, mode: 'insensitive' } } },
                            { buyCoin: { name: { contains: q, mode: 'insensitive' } } },
                            { buyNetwork: { name: { contains: q, mode: 'insensitive' } } },
                            { payCoin: { symbol: { contains: q, mode: 'insensitive' } } },
                            { payCoin: { name: { contains: q, mode: 'insensitive' } } },
                            { payNetwork: { name: { contains: q, mode: 'insensitive' } } },
                            { id: { contains: q, mode: 'insensitive' } },
                        ];
                    }
                    return [4 /*yield*/, prisma.exchangeRate.findMany({
                            where: where,
                            orderBy: { createdAt: 'desc' },
                            include: {
                                buyCoin: true,
                                buyNetwork: true,
                                payCoin: true,
                                payNetwork: true,
                            },
                        })];
                case 1:
                    rates = _a.sent();
                    return [2 /*return*/, server_1.NextResponse.json(rates)];
                case 2:
                    error_1 = _a.sent();
                    console.error('GET /api/rates error:', error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Internal server error' }, { status: 500 })];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.GET = GET;
/**
 * POST /api/rates
 * body: { buyCoinId, buyNetworkId, payCoinId, payNetworkId, rate, updatedBy? }
 * Upsert by unique 4 kolom. Saat upsert, set rate & updatedBy.
 */
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var body, _a, buyCoinId, buyNetworkId, payCoinId, payNetworkId, rate, actor, parsedRate, _b, buyCoin, buyNetwork, payCoin, payNetwork, rateRow, error_2;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 4, , 5]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    body = _c.sent();
                    _a = body || {}, buyCoinId = _a.buyCoinId, buyNetworkId = _a.buyNetworkId, payCoinId = _a.payCoinId, payNetworkId = _a.payNetworkId, rate = _a.rate;
                    actor = (body === null || body === void 0 ? void 0 : body.updatedBy) ||
                        req.headers.get('x-actor') ||
                        req.headers.get('x-admin') ||
                        null;
                    if (!buyCoinId || !buyNetworkId || !payCoinId || !payNetworkId || rate == null) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'buyCoinId, buyNetworkId, payCoinId, payNetworkId, dan rate wajib diisi' }, { status: 400 })];
                    }
                    parsedRate = Number(rate);
                    if (!Number.isFinite(parsedRate) || parsedRate <= 0) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Rate tidak valid' }, { status: 400 })];
                    }
                    return [4 /*yield*/, Promise.all([
                            prisma.coin.findUnique({ where: { id: buyCoinId } }),
                            prisma.network.findUnique({ where: { id: buyNetworkId } }),
                            prisma.coin.findUnique({ where: { id: payCoinId } }),
                            prisma.network.findUnique({ where: { id: payNetworkId } }),
                        ])];
                case 2:
                    _b = _c.sent(), buyCoin = _b[0], buyNetwork = _b[1], payCoin = _b[2], payNetwork = _b[3];
                    if (!buyCoin || !buyNetwork || !payCoin || !payNetwork) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Coin atau Network tidak ditemukan' }, { status: 404 })];
                    }
                    return [4 /*yield*/, prisma.exchangeRate.upsert({
                            where: {
                                buyCoinId_buyNetworkId_payCoinId_payNetworkId: {
                                    buyCoinId: buyCoinId,
                                    buyNetworkId: buyNetworkId,
                                    payCoinId: payCoinId,
                                    payNetworkId: payNetworkId,
                                },
                            },
                            update: { rate: parsedRate, updatedBy: actor || undefined },
                            create: {
                                buyCoinId: buyCoinId,
                                buyNetworkId: buyNetworkId,
                                payCoinId: payCoinId,
                                payNetworkId: payNetworkId,
                                rate: parsedRate,
                                updatedBy: actor || undefined,
                            },
                            include: {
                                buyCoin: true,
                                buyNetwork: true,
                                payCoin: true,
                                payNetwork: true,
                            },
                        })];
                case 3:
                    rateRow = _c.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Rate saved', rate: rateRow })];
                case 4:
                    error_2 = _c.sent();
                    console.error('POST /api/rates error:', error_2);
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Internal server error' }, { status: 500 })];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
