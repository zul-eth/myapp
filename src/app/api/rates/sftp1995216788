"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = exports.GET = void 0;
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var prisma = new client_1.PrismaClient();
function GET(req) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var searchParams, buyCoinId, buyNetworkId, payCoinId, payNetworkId, rate, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    searchParams = new URL(req.url).searchParams;
                    buyCoinId = searchParams.get("buyCoinId");
                    buyNetworkId = searchParams.get("buyNetworkId");
                    payCoinId = searchParams.get("payCoinId");
                    payNetworkId = searchParams.get("payNetworkId");
                    if (!buyCoinId || !buyNetworkId || !payCoinId || !payNetworkId) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: "Missing parameters" }, { status: 400 })];
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, prisma.exchangeRate.findUnique({
                            where: {
                                buyCoinId_buyNetworkId_payCoinId_payNetworkId: {
                                    buyCoinId: buyCoinId,
                                    buyNetworkId: buyNetworkId,
                                    payCoinId: payCoinId,
                                    payNetworkId: payNetworkId,
                                },
                            },
                            include: {
                                buyCoin: true,
                                buyNetwork: true,
                                payCoin: true,
                                payNetwork: true,
                            },
                        })];
                case 2:
                    rate = _b.sent();
                    if (!rate) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: "Rate not found" }, { status: 404 })];
                    }
                    return [2 /*return*/, server_1.NextResponse.json({
                            rate: rate.rate,
                            buyCoin: rate.buyCoin.symbol,
                            buyNetwork: rate.buyNetwork.name,
                            payCoin: rate.payCoin.symbol,
                            payNetwork: rate.payNetwork.name,
                            updatedAt: rate.updatedAt,
                            updatedBy: (_a = rate.updatedBy) !== null && _a !== void 0 ? _a : null,
                        })];
                case 3:
                    error_1 = _b.sent();
                    console.error("GET /api/rates error:", error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: "Internal server error" }, { status: 500 })];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.GET = GET;
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var body, buyCoinId, buyNetworkId, payCoinId, payNetworkId, buyCoinSymbol, buyNetworkName, payCoinSymbol, payNetworkName, rate, updatedBy, _a, buyCoin, buyNetwork, payCoin, payNetwork, upserted, error_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, , 6]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    body = _b.sent();
                    buyCoinId = body.buyCoinId, buyNetworkId = body.buyNetworkId, payCoinId = body.payCoinId, payNetworkId = body.payNetworkId, buyCoinSymbol = body.buyCoinSymbol, buyNetworkName = body.buyNetworkName, payCoinSymbol = body.payCoinSymbol, payNetworkName = body.payNetworkName, rate = body.rate, updatedBy = body.updatedBy;
                    if (!rate) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: "Rate value is required" }, { status: 400 })];
                    }
                    if (!(!buyCoinId || !buyNetworkId || !payCoinId || !payNetworkId)) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.all([
                            buyCoinId ? prisma.coin.findUnique({ where: { id: buyCoinId } }) : prisma.coin.findUnique({ where: { symbol: buyCoinSymbol } }),
                            buyNetworkId ? prisma.network.findUnique({ where: { id: buyNetworkId } }) : prisma.network.findUnique({ where: { name: buyNetworkName } }),
                            payCoinId ? prisma.coin.findUnique({ where: { id: payCoinId } }) : prisma.coin.findUnique({ where: { symbol: payCoinSymbol } }),
                            payNetworkId ? prisma.network.findUnique({ where: { id: payNetworkId } }) : prisma.network.findUnique({ where: { name: payNetworkName } }),
                        ])];
                case 2:
                    _a = _b.sent(), buyCoin = _a[0], buyNetwork = _a[1], payCoin = _a[2], payNetwork = _a[3];
                    if (!buyCoin || !buyNetwork || !payCoin || !payNetwork) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: "Coin or network not found" }, { status: 404 })];
                    }
                    buyCoinId = buyCoin.id;
                    buyNetworkId = buyNetwork.id;
                    payCoinId = payCoin.id;
                    payNetworkId = payNetwork.id;
                    _b.label = 3;
                case 3: return [4 /*yield*/, prisma.exchangeRate.upsert({
                        where: {
                            buyCoinId_buyNetworkId_payCoinId_payNetworkId: {
                                buyCoinId: buyCoinId,
                                buyNetworkId: buyNetworkId,
                                payCoinId: payCoinId,
                                payNetworkId: payNetworkId,
                            },
                        },
                        update: {
                            rate: rate,
                            updatedBy: updatedBy,
                        },
                        create: {
                            rate: rate,
                            updatedBy: updatedBy,
                            buyCoinId: buyCoinId,
                            buyNetworkId: buyNetworkId,
                            payCoinId: payCoinId,
                            payNetworkId: payNetworkId,
                        },
                    })];
                case 4:
                    upserted = _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json({
                            message: "Rate saved",
                            rate: upserted.rate,
                            updatedAt: upserted.updatedAt,
                        })];
                case 5:
                    error_2 = _b.sent();
                    console.error("POST /api/rates error:", error_2);
                    return [2 /*return*/, server_1.NextResponse.json({ message: "Internal server error" }, { status: 500 })];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
