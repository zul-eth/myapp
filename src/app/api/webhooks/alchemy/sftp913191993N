"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
// src/app/api/webhooks/alchemy/route.ts
var crypto_1 = require("crypto");
var server_1 = require("next/server");
var client_1 = require("@prisma/client");
var validate_1 = require("@/lib/payments/validate");
var prisma = new client_1.PrismaClient();
function verify(raw, sig, secret) {
    if (!sig || !secret)
        return false;
    var h = crypto_1.default.createHmac('sha256', secret).update(raw, 'utf8').digest('hex');
    try {
        return crypto_1.default.timingSafeEqual(Buffer.from(sig), Buffer.from(h));
    }
    catch (_a) {
        return false;
    }
}
function POST(req) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var secret, raw, sig, body, acts, rawTo, toSet, candidates, orders, results;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    secret = process.env.ALCHEMY_WEBHOOK_SECRET || '';
                    return [4 /*yield*/, req.text()];
                case 1:
                    raw = _c.sent();
                    sig = req.headers.get('x-alchemy-signature') || '';
                    if (!verify(raw, sig, secret)) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'invalid signature' }, { status: 401 })];
                    }
                    body = JSON.parse(raw);
                    acts = ((_a = body === null || body === void 0 ? void 0 : body.event) === null || _a === void 0 ? void 0 : _a.activity) || ((_b = body === null || body === void 0 ? void 0 : body.data) === null || _b === void 0 ? void 0 : _b.activity) || (body === null || body === void 0 ? void 0 : body.activity) || [];
                    if (!Array.isArray(acts) || acts.length === 0) {
                        return [2 /*return*/, server_1.NextResponse.json({ ok: true, matched: 0 })];
                    }
                    rawTo = Array.from(new Set(acts.map(function (a) { var _a, _b; return String((_b = (_a = a === null || a === void 0 ? void 0 : a.toAddress) !== null && _a !== void 0 ? _a : a === null || a === void 0 ? void 0 : a.to) !== null && _b !== void 0 ? _b : '').trim(); }).filter(Boolean)));
                    toSet = new Set(rawTo.map(function (a) { return a.toLowerCase(); }));
                    if (toSet.size === 0)
                        return [2 /*return*/, server_1.NextResponse.json({ ok: true, matched: 0 })];
                    return [4 /*yield*/, prisma.order.findMany({
                            where: {
                                status: { in: ['WAITING_PAYMENT', 'UNDERPAID', 'WAITING_CONFIRMATION'] },
                            },
                            select: { id: true, paymentAddr: true, status: true },
                            // optional throttle biar ringan:
                            // orderBy: { createdAt: 'desc' }, take: 500,
                        })];
                case 2:
                    candidates = _c.sent();
                    orders = candidates.filter(function (o) { return toSet.has((o.paymentAddr || '').toLowerCase()); });
                    if (orders.length === 0) {
                        return [2 /*return*/, server_1.NextResponse.json({ ok: true, matched: 0 })];
                    }
                    return [4 /*yield*/, Promise.all(orders.map(function (o) { return (0, validate_1.validateOrderEvm)(o.id); }))];
                case 3:
                    results = _c.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ ok: true, matched: orders.length, results: results })];
            }
        });
    });
}
exports.POST = POST;
