"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
// src/app/api/webhooks/alchemy/clean/route.ts
var server_1 = require("next/server");
var client_1 = require("@prisma/client");
var notify_1 = require("@/lib/payments/notify");
var networkMap_1 = require("@/lib/payments/networkMap");
var prisma = new client_1.PrismaClient();
function auth(req) {
    var s = process.env.CRON_SECRET || '';
    var h = req.headers.get('x-cron-key') || '';
    var q = new URL(req.url).searchParams.get('key') || '';
    return !s || h === s || q === s;
}
function POST(req) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function () {
        var active, byWebhook, _i, active_1, o, addr, net, conf, webhookId, stats, _e, _f, _g, webhookId, set, list, _h, _j, name, conf, webhookId;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    if (!auth(req))
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'unauthorized' }, { status: 401 })];
                    if (!process.env.ALCHEMY_NOTIFY_TOKEN) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'missing ALCHEMY_NOTIFY_TOKEN' }, { status: 500 })];
                    }
                    return [4 /*yield*/, prisma.order.findMany({
                            where: { status: { in: ['WAITING_PAYMENT', 'UNDERPAID', 'WAITING_CONFIRMATION'] } },
                            select: { paymentAddr: true, payNetwork: { select: { name: true } } },
                        })];
                case 1:
                    active = _k.sent();
                    byWebhook = new Map();
                    for (_i = 0, active_1 = active; _i < active_1.length; _i++) {
                        o = active_1[_i];
                        addr = ((_a = o.paymentAddr) !== null && _a !== void 0 ? _a : '').trim();
                        net = ((_c = (_b = o.payNetwork) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '').trim();
                        if (!addr || !net)
                            continue;
                        conf = networkMap_1.EVM_NETWORKS[net];
                        webhookId = (conf === null || conf === void 0 ? void 0 : conf.webhookId) || '';
                        if (!webhookId)
                            continue;
                        ((_d = byWebhook.get(webhookId)) !== null && _d !== void 0 ? _d : byWebhook.set(webhookId, new Set()).get(webhookId)).add(addr);
                    }
                    stats = {};
                    _e = 0, _f = byWebhook.entries();
                    _k.label = 2;
                case 2:
                    if (!(_e < _f.length)) return [3 /*break*/, 5];
                    _g = _f[_e], webhookId = _g[0], set = _g[1];
                    list = __spreadArray([], set, true);
                    return [4 /*yield*/, (0, notify_1.replaceWebhookAddresses)(webhookId, list)];
                case 3:
                    _k.sent(); // ⬅️ PUT replace
                    stats[webhookId] = list.length;
                    _k.label = 4;
                case 4:
                    _e++;
                    return [3 /*break*/, 2];
                case 5:
                    _h = 0, _j = Object.keys(networkMap_1.EVM_NETWORKS);
                    _k.label = 6;
                case 6:
                    if (!(_h < _j.length)) return [3 /*break*/, 9];
                    name = _j[_h];
                    conf = networkMap_1.EVM_NETWORKS[name];
                    webhookId = (conf === null || conf === void 0 ? void 0 : conf.webhookId) || '';
                    if (!webhookId)
                        return [3 /*break*/, 8];
                    if (!!byWebhook.has(webhookId)) return [3 /*break*/, 8];
                    return [4 /*yield*/, (0, notify_1.replaceWebhookAddresses)(webhookId, [])];
                case 7:
                    _k.sent(); // kosongkan total
                    stats[webhookId] = 0;
                    _k.label = 8;
                case 8:
                    _h++;
                    return [3 /*break*/, 6];
                case 9: return [2 /*return*/, server_1.NextResponse.json({ ok: true, replaced: stats })];
            }
        });
    });
}
exports.POST = POST;
