"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
// src/app/api/webhooks/alchemy/sync/route.ts
var server_1 = require("next/server");
var client_1 = require("@prisma/client");
var notify_1 = require("@/lib/payments/notify");
var networkMap_1 = require("@/lib/payments/networkMap");
var prisma = new client_1.PrismaClient();
function auth(req) {
    var secret = process.env.CRON_SECRET || '';
    var hdr = req.headers.get('x-cron-key') || '';
    var q = new URL(req.url).searchParams.get('key') || '';
    return !secret || hdr === secret || q === secret;
}
function POST(req) {
    var _a, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function () {
        var active, stale, byNetAdd, byNetRem, _i, active_1, o, net, webhookId, _e, stale_1, o, net, webhookId, ops, _f, _g, _h, webhookId, set, _j, _k, _l, webhookId, set;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    if (!auth(req))
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'unauthorized' }, { status: 401 })];
                    return [4 /*yield*/, prisma.order.findMany({
                            where: {
                                status: { in: ['WAITING_PAYMENT', 'UNDERPAID', 'WAITING_CONFIRMATION'] },
                                paymentAddr: { not: null },
                            },
                            select: { paymentAddr: true, payNetwork: { select: { name: true } } },
                        })];
                case 1:
                    active = _m.sent();
                    return [4 /*yield*/, prisma.order.findMany({
                            where: {
                                status: { in: ['COMPLETED', 'EXPIRED', 'FAILED'] },
                                paymentAddr: { not: null },
                            },
                            select: { paymentAddr: true, payNetwork: { select: { name: true } } },
                        })];
                case 2:
                    stale = _m.sent();
                    byNetAdd = {};
                    byNetRem = {};
                    for (_i = 0, active_1 = active; _i < active_1.length; _i++) {
                        o = active_1[_i];
                        net = ((_a = o.payNetwork) === null || _a === void 0 ? void 0 : _a.name) || '';
                        webhookId = ((_b = networkMap_1.EVM_NETWORKS[net]) === null || _b === void 0 ? void 0 : _b.webhookId) || '';
                        if (!webhookId || !o.paymentAddr)
                            continue;
                        (byNetAdd[webhookId] || (byNetAdd[webhookId] = new Set())).add(o.paymentAddr.toLowerCase());
                    }
                    for (_e = 0, stale_1 = stale; _e < stale_1.length; _e++) {
                        o = stale_1[_e];
                        net = ((_c = o.payNetwork) === null || _c === void 0 ? void 0 : _c.name) || '';
                        webhookId = ((_d = networkMap_1.EVM_NETWORKS[net]) === null || _d === void 0 ? void 0 : _d.webhookId) || '';
                        if (!webhookId || !o.paymentAddr)
                            continue;
                        (byNetRem[webhookId] || (byNetRem[webhookId] = new Set())).add(o.paymentAddr.toLowerCase());
                    }
                    ops = [];
                    for (_f = 0, _g = Object.entries(byNetAdd); _f < _g.length; _f++) {
                        _h = _g[_f], webhookId = _h[0], set = _h[1];
                        ops.push((0, notify_1.addAddressesToWebhook)(webhookId, __spreadArray([], set, true)));
                    }
                    for (_j = 0, _k = Object.entries(byNetRem); _j < _k.length; _j++) {
                        _l = _k[_j], webhookId = _l[0], set = _l[1];
                        ops.push((0, notify_1.removeAddressesFromWebhook)(webhookId, __spreadArray([], set, true)));
                    }
                    return [4 /*yield*/, Promise.all(ops)];
                case 3:
                    _m.sent();
                    return [2 /*return*/, server_1.NextResponse.json({
                            ok: true,
                            add_webhooks: Object.fromEntries(Object.entries(byNetAdd).map(function (_a) {
                                var k = _a[0], v = _a[1];
                                return [k, v.size];
                            })),
                            remove_webhooks: Object.fromEntries(Object.entries(byNetRem).map(function (_a) {
                                var k = _a[0], v = _a[1];
                                return [k, v.size];
                            })),
                        })];
            }
        });
    });
}
exports.POST = POST;
