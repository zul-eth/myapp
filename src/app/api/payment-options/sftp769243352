"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = exports.GET = void 0;
// src/app/api/payment-options/route.ts
var client_1 = require("@prisma/client");
var server_1 = require("next/server");
var prisma = new client_1.PrismaClient();
/**
 * GET /api/payment-options
 * Query:
 * - q?: string  (filter by coin.symbol/name atau network.name)
 * - active?: 'true' | 'false' (default true)
 */
function GET(req) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var searchParams, q, activeParam, where, rows, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    searchParams = new URL(req.url).searchParams;
                    q = searchParams.get('q') || undefined;
                    activeParam = (_a = searchParams.get('active')) !== null && _a !== void 0 ? _a : 'true';
                    where = {};
                    if (activeParam === 'true')
                        where.isActive = true;
                    if (activeParam === 'false')
                        where.isActive = false;
                    if (q) {
                        where.OR = [
                            { coin: { symbol: { contains: q, mode: 'insensitive' } } },
                            { coin: { name: { contains: q, mode: 'insensitive' } } },
                            { network: { name: { contains: q, mode: 'insensitive' } } },
                        ];
                    }
                    // pastikan coin/network-nya juga aktif
                    where.coin = __assign(__assign({}, (where.coin || {})), { isActive: true });
                    where.network = __assign(__assign({}, (where.network || {})), { isActive: true });
                    return [4 /*yield*/, prisma.paymentOption.findMany({
                            where: where,
                            orderBy: { createdAt: 'desc' },
                            include: { coin: true, network: true },
                        })];
                case 1:
                    rows = _b.sent();
                    // UI mengharapkan array langsung dengan { coin, network, id, isActive }
                    return [2 /*return*/, server_1.NextResponse.json(rows)];
                case 2:
                    e_1 = _b.sent();
                    console.error('GET /api/payment-options error:', e_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Internal server error' }, { status: 500 })];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.GET = GET;
// POST: Tambah kombinasi coin-network untuk payment
function POST(req) {
    return __awaiter(this, void 0, void 0, function () {
        var body, _a, coinToBuyId_1, buyNetworkId_1, payWithId_1, payNetworkId_1, amount_1, receivingAddr_1, mnemonic_1, createdOrderId, order, error_1;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 4, , 5]);
                    return [4 /*yield*/, req.json()];
                case 1:
                    body = _b.sent();
                    _a = body || {}, coinToBuyId_1 = _a.coinToBuyId, buyNetworkId_1 = _a.buyNetworkId, payWithId_1 = _a.payWithId, payNetworkId_1 = _a.payNetworkId, amount_1 = _a.amount, receivingAddr_1 = _a.receivingAddr;
                    if (!coinToBuyId_1 || !buyNetworkId_1 || !payWithId_1 || !payNetworkId_1 || !amount_1 || !receivingAddr_1) {
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'Field wajib belum lengkap' }, { status: 400 })];
                    }
                    mnemonic_1 = process.env.MNEMONIC;
                    if (!mnemonic_1)
                        return [2 /*return*/, server_1.NextResponse.json({ message: 'MNEMONIC belum dikonfigurasi' }, { status: 500 })];
                    return [4 /*yield*/, prisma.$transaction(function (tx) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, payNetwork, rateEntry, priceRate, n, dbChain, runtimeChain, cur, indexAssigned, address, created;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, Promise.all([
                                            tx.network.findUnique({ where: { id: payNetworkId_1 } }),
                                            tx.exchangeRate.findFirst({
                                                where: { buyCoinId: coinToBuyId_1, buyNetworkId: buyNetworkId_1, payCoinId: payWithId_1, payNetworkId: payNetworkId_1 },
                                                select: { rate: true },
                                            }),
                                        ])];
                                    case 1:
                                        _a = _b.sent(), payNetwork = _a[0], rateEntry = _a[1];
                                        if (!payNetwork)
                                            throw new Error('Network pembayaran tidak ditemukan');
                                        priceRate = Number(rateEntry === null || rateEntry === void 0 ? void 0 : rateEntry.rate);
                                        if (!Number.isFinite(priceRate) || priceRate <= 0)
                                            throw new Error('Rate tidak ditemukan/invalid untuk pasangan ini');
                                        n = payNetwork.name.trim().toLowerCase();
                                        dbChain = n.includes('tron') || n === 'trx' ? 'tron' : n.includes('solana') || n === 'sol' ? 'solana' : 'evm';
                                        runtimeChain = dbChain === 'evm' ? 'eth' : dbChain;
                                        return [4 /*yield*/, tx.hdCursor.upsert({
                                                where: { chain: dbChain },
                                                update: { nextIndex: { increment: 1 } },
                                                create: { chain: dbChain, nextIndex: 1 },
                                            })];
                                    case 2:
                                        cur = _b.sent();
                                        indexAssigned = cur.nextIndex - 1;
                                        return [4 /*yield*/, generateAddress(runtimeChain, mnemonic_1, indexAssigned)];
                                    case 3:
                                        address = _b.sent();
                                        if (!address || typeof address !== 'string')
                                            throw new Error('Gagal generate address');
                                        return [4 /*yield*/, tx.order.create({
                                                data: {
                                                    coinToBuyId: coinToBuyId_1,
                                                    buyNetworkId: buyNetworkId_1,
                                                    payWithId: payWithId_1,
                                                    payNetworkId: payNetworkId_1,
                                                    amount: Number(amount_1),
                                                    priceRate: priceRate,
                                                    receivingAddr: receivingAddr_1,
                                                    paymentAddr: address,
                                                    status: 'WAITING_PAYMENT',
                                                },
                                                select: { id: true },
                                            })];
                                    case 4:
                                        created = _b.sent();
                                        // 5) catat ledger assignment
                                        return [4 /*yield*/, tx.walletPoolLegacy.create({
                                                data: {
                                                    chain: dbChain,
                                                    derivationIndex: indexAssigned,
                                                    address: address,
                                                    isUsed: true,
                                                    assignedOrder: created.id,
                                                },
                                            })];
                                    case 5:
                                        // 5) catat ledger assignment
                                        _b.sent();
                                        return [2 /*return*/, { createdOrderId: created.id }];
                                }
                            });
                        }); })];
                case 2:
                    createdOrderId = (_b.sent()).createdOrderId;
                    return [4 /*yield*/, prisma.order.findUnique({
                            where: { id: createdOrderId },
                            include: { coinToBuy: true, buyNetwork: true, payWith: true, payNetwork: true },
                        })];
                case 3:
                    order = _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ message: 'Order created', order: order })];
                case 4:
                    error_1 = _b.sent();
                    console.error('POST /api/orders error:', error_1);
                    return [2 /*return*/, server_1.NextResponse.json({ message: (error_1 === null || error_1 === void 0 ? void 0 : error_1.message) || 'Internal server error' }, { status: 500 })];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
