"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("@prisma/client");
var expireOrders_1 = require("@/scripts/expireOrders");
var prisma = new client_1.PrismaClient();
var coin;
var network;
var expired1;
var expired2;
var future1;
beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
    var past, future;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prisma.coin.upsert({
                    where: { symbol: 'USDT' },
                    update: {},
                    create: { symbol: 'USDT', name: 'Tether' },
                })];
            case 1:
                // Pastikan Coin & Network tersedia
                coin = _a.sent();
                return [4 /*yield*/, prisma.network.upsert({
                        where: { name: 'Ethereum' },
                        update: {},
                        create: { name: 'Ethereum' },
                    })];
            case 2:
                network = _a.sent();
                past = new Date(Date.now() - 60 * 60 * 1000);
                future = new Date(Date.now() + 60 * 60 * 1000);
                return [4 /*yield*/, prisma.order.create({
                        data: {
                            coinToBuyId: coin.id,
                            buyNetworkId: network.id,
                            payWithId: coin.id,
                            payNetworkId: network.id,
                            amount: 100,
                            priceRate: 1,
                            receivingAddr: 'receive1',
                            paymentAddr: 'pay1',
                            status: client_1.OrderStatus.WAITING_PAYMENT,
                            expiresAt: past,
                        },
                    })];
            case 3:
                // ✅ Harus diexpire
                expired1 = _a.sent();
                return [4 /*yield*/, prisma.order.create({
                        data: {
                            coinToBuyId: coin.id,
                            buyNetworkId: network.id,
                            payWithId: coin.id,
                            payNetworkId: network.id,
                            amount: 200,
                            priceRate: 1,
                            receivingAddr: 'receive2',
                            paymentAddr: 'pay2',
                            status: client_1.OrderStatus.UNDERPAID,
                            expiresAt: past,
                        },
                    })];
            case 4:
                expired2 = _a.sent();
                return [4 /*yield*/, prisma.order.create({
                        data: {
                            coinToBuyId: coin.id,
                            buyNetworkId: network.id,
                            payWithId: coin.id,
                            payNetworkId: network.id,
                            amount: 300,
                            priceRate: 1,
                            receivingAddr: 'receive3',
                            paymentAddr: 'pay3',
                            status: client_1.OrderStatus.WAITING_PAYMENT,
                            expiresAt: future,
                        },
                    })];
            case 5:
                // ❌ Tidak boleh expire
                future1 = _a.sent();
                return [2 /*return*/];
        }
    });
}); });
afterAll(function () { return __awaiter(void 0, void 0, void 0, function () {
    var ids;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                ids = [expired1 === null || expired1 === void 0 ? void 0 : expired1.id, expired2 === null || expired2 === void 0 ? void 0 : expired2.id, future1 === null || future1 === void 0 ? void 0 : future1.id].filter(Boolean);
                return [4 /*yield*/, prisma.order.deleteMany({ where: { id: { in: ids } } })];
            case 1:
                _a.sent();
                return [4 /*yield*/, prisma.$disconnect()];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
test('expireOrders script should expire the correct orders', function () { return __awaiter(void 0, void 0, void 0, function () {
    var check1, check2, check3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, expireOrders_1.default)()];
            case 1:
                _a.sent();
                return [4 /*yield*/, prisma.order.findUnique({ where: { id: expired1.id } })];
            case 2:
                check1 = _a.sent();
                return [4 /*yield*/, prisma.order.findUnique({ where: { id: expired2.id } })];
            case 3:
                check2 = _a.sent();
                return [4 /*yield*/, prisma.order.findUnique({ where: { id: future1.id } })];
            case 4:
                check3 = _a.sent();
                expect(check1 === null || check1 === void 0 ? void 0 : check1.status).toBe(client_1.OrderStatus.EXPIRED);
                expect(check2 === null || check2 === void 0 ? void 0 : check2.status).toBe(client_1.OrderStatus.EXPIRED);
                expect(check3 === null || check3 === void 0 ? void 0 : check3.status).toBe(client_1.OrderStatus.WAITING_PAYMENT);
                return [2 /*return*/];
        }
    });
}); });
