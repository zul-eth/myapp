"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("@prisma/client");
var route_1 = require("@/app/api/order/route");
var route_2 = require("@/app/api/order/[id]/route");
var server_1 = require("next/server");
jest.mock('@/lib/hdwallet/universal', function () { return ({
    generateAddress: jest.fn().mockResolvedValue({ address: 'mock-payment-address' }),
}); });
// Inject MNEMONIC
process.env.MNEMONIC = 'test mnemonic phrase';
var prisma = new client_1.PrismaClient();
var orderId;
beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
    var coin, payCoin, buyNet, payNet;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prisma.order.deleteMany()];
            case 1:
                _a.sent();
                return [4 /*yield*/, prisma.exchangeRate.deleteMany()];
            case 2:
                _a.sent();
                return [4 /*yield*/, prisma.coin.deleteMany()];
            case 3:
                _a.sent();
                return [4 /*yield*/, prisma.network.deleteMany()];
            case 4:
                _a.sent();
                return [4 /*yield*/, prisma.coin.create({ data: { name: 'Bitcoin', symbol: 'BTC', isActive: true } })];
            case 5:
                coin = _a.sent();
                return [4 /*yield*/, prisma.coin.create({ data: { name: 'USDT', symbol: 'USDT', isActive: true } })];
            case 6:
                payCoin = _a.sent();
                return [4 /*yield*/, prisma.network.create({ data: { name: 'Bitcoin', isActive: true } })];
            case 7:
                buyNet = _a.sent();
                return [4 /*yield*/, prisma.network.create({ data: { name: 'Ethereum', isActive: true } })];
            case 8:
                payNet = _a.sent();
                return [4 /*yield*/, prisma.exchangeRate.create({
                        data: {
                            buyCoinId: coin.id,
                            buyNetworkId: buyNet.id,
                            payCoinId: payCoin.id,
                            payNetworkId: payNet.id,
                            rate: 0.0001,
                        },
                    })];
            case 9:
                _a.sent();
                global.testData = {
                    coinToBuyId: coin.id,
                    buyNetworkId: buyNet.id,
                    payWithId: payCoin.id,
                    payNetworkId: payNet.id,
                };
                return [2 /*return*/];
        }
    });
}); });
describe('API /api/order', function () {
    it('POST: should create a new order', function () { return __awaiter(void 0, void 0, void 0, function () {
        var body, req, res, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    body = __assign(__assign({}, global.testData), { amount: 1000, receivingAddr: 'user-wallet-address' });
                    req = new server_1.NextRequest('http://localhost/api/order', {
                        method: 'POST',
                        body: JSON.stringify(body),
                        headers: { 'content-type': 'application/json' },
                    });
                    // Patch req.json for compatibility
                    req.json = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, body];
                    }); }); };
                    return [4 /*yield*/, (0, route_1.POST)(req)];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.json()];
                case 2:
                    json = _a.sent();
                    expect(res.status).toBe(200);
                    expect(json.message).toBe('Order created');
                    expect(json.order).toHaveProperty('id');
                    orderId = json.order.id;
                    return [2 /*return*/];
            }
        });
    }); });
    it('GET: should return an order by ID', function () { return __awaiter(void 0, void 0, void 0, function () {
        var req, res, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    req = new server_1.NextRequest("http://localhost/api/orders/".concat(orderId), {
                        method: 'GET',
                    });
                    return [4 /*yield*/, (0, route_2.GET)(req, { params: { id: orderId } })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.json()];
                case 2:
                    json = _a.sent();
                    expect(res.status).toBe(200);
                    expect(json.id).toBe(orderId);
                    return [2 /*return*/];
            }
        });
    }); });
    it('PUT: should update order status', function () { return __awaiter(void 0, void 0, void 0, function () {
        var req, res, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    req = new server_1.NextRequest("http://localhost/api/orders/".concat(orderId, "/status"), {
                        method: 'PUT',
                        body: JSON.stringify({ status: client_1.OrderStatus.COMPLETED }),
                        headers: { 'content-type': 'application/json' },
                    });
                    req.json = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, ({ status: client_1.OrderStatus.COMPLETED })];
                    }); }); };
                    return [4 /*yield*/, (0, route_2.PUT)(req, { params: { id: orderId } })];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.json()];
                case 2:
                    json = _a.sent();
                    expect(res.status).toBe(200);
                    expect(json.message).toBe('Order status updated');
                    expect(json.order.status).toBe(client_1.OrderStatus.COMPLETED);
                    return [2 /*return*/];
            }
        });
    }); });
});
