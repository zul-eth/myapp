generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChainFamily {
  EVM
  TRON
  SOLANA
  EOS
  XRP
  DOGE
  SUI
  LTC
  TON
}

enum AssetType {
  NATIVE
  EVM_ERC20
  OTHER
}

enum MemoKind {
  NONE
  XRP_TAG
  EOS_TEXT
  TON_TEXT
  OTHER
}

model Coin {
  id       String        @id @default(uuid())
  symbol   String        @unique
  name     String
  logoUrl  String?
  isActive Boolean       @default(true)
  networks CoinNetwork[]

  paymentOptions PaymentOption[]
  ordersToBuy    Order[]         @relation("BuyCoin")
  ordersToPay    Order[]         @relation("PayCoin")

  buyRates ExchangeRate[] @relation("BuyRateCoin")
  payRates ExchangeRate[] @relation("PayRateCoin")

  createdAt DateTime @default(now())
}

model Network {
  id       String        @id @default(uuid())
  name     String        @unique
  logoUrl  String?
  isActive Boolean       @default(true)
  coins    CoinNetwork[]

  paymentOptions PaymentOption[]
  buyOrders      Order[]         @relation("BuyNetwork")
  payOrders      Order[]         @relation("PayNetwork")

  buyRates ExchangeRate[] @relation("BuyRateNetwork")
  payRates ExchangeRate[] @relation("PayRateNetwork")
  
  family   ChainFamily   @default(EVM) 
  chainId  String?
  symbol   String?
  rpcUrl   String?
  explorer String?

  createdAt DateTime @default(now())
}

model CoinNetwork {
  id        String @id @default(uuid())
  coinId    String
  networkId String

  coin    Coin    @relation(fields: [coinId], references: [id])
  network Network @relation(fields: [networkId], references: [id])
  
  assetType       AssetType   @default(NATIVE)
  contractAddress String?     @db.VarChar(128)
  decimals        Int?        @default(18)
  symbolOverride  String?

  memoKind        MemoKind    @default(NONE)
  memoLabel       String?
  memoRegex       String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([coinId, networkId])
  @@index([networkId, contractAddress])
}

model PaymentOption {
  id        String @id @default(uuid())
  coinId    String
  networkId String

  coin    Coin    @relation(fields: [coinId], references: [id])
  network Network @relation(fields: [networkId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([coinId, networkId])
}

model HdCursor {
  id         String   @id @default(uuid())
  chain      String   @unique
  nextIndex  Int      @default(0)
  lastUsedAt DateTime?
  updatedAt  DateTime @updatedAt
}

model WalletPoolLegacy {
  id              String @id @default(uuid())
  chain           String
  derivationIndex Int
  address         String @unique

  isUsed          Boolean @default(false)
  assignedOrderId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  order Order? @relation("WalletPool_Order", fields: [assignedOrderId], references: [id])

  @@unique([chain, derivationIndex])
}

model Order {
  id String @id @default(cuid())

  coinToBuyId  String
  buyNetworkId String
  coinToBuy    Coin    @relation("BuyCoin", fields: [coinToBuyId], references: [id])
  buyNetwork   Network @relation("BuyNetwork", fields: [buyNetworkId], references: [id])

  payWithId    String
  payNetworkId String
  payWith      Coin    @relation("PayCoin", fields: [payWithId], references: [id])
  payNetwork   Network @relation("PayNetwork", fields: [payNetworkId], references: [id])

  amount         Float
  receivedAmount Float? @default(0)
  priceRate      Float

  receivingAddr String
  receivingMemo String?
  
  paymentAddr   String
  paymentMemo   String?

  txHash        String?
  confirmations Int         @default(0)
  status        OrderStatus @default(PENDING)
  
  payoutHash      String?   @db.VarChar(128) @unique
  payoutAt        DateTime?

  walletPoolLegacy WalletPoolLegacy? @relation("WalletPool_Order")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
}

model ExchangeRate {
  id String @id @default(uuid())

  buyCoinId    String
  buyNetworkId String
  payCoinId    String
  payNetworkId String

  buyCoin    Coin    @relation("BuyRateCoin", fields: [buyCoinId], references: [id])
  buyNetwork Network @relation("BuyRateNetwork", fields: [buyNetworkId], references: [id])
  payCoin    Coin    @relation("PayRateCoin", fields: [payCoinId], references: [id])
  payNetwork Network @relation("PayRateNetwork", fields: [payNetworkId], references: [id])

  rate      Float
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buyCoinId, buyNetworkId, payCoinId, payNetworkId])
}

enum OrderStatus {
  PENDING
  WAITING_PAYMENT
  UNDERPAID
  WAITING_CONFIRMATION
  CONFIRMED
  COMPLETED
  EXPIRED
  FAILED
}


