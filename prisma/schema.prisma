generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChainFamily {
  EVM
  TRON
  SOLANA
  EOS
  XRP
  DOGE
  SUI
  LTC
  TON
}

enum AssetType {
  NATIVE
  EVM_ERC20
  OTHER
}

enum MemoKind {
  NONE
  XRP_TAG
  EOS_TEXT
  TON_TEXT
  OTHER
}

model Coin {
  id       String        @id @default(uuid())
  symbol   String        @unique
  name     String
  logoUrl  String?
  isActive Boolean       @default(true)
  networks CoinNetwork[]

  paymentOptions PaymentOption[]
  ordersToBuy    Order[]         @relation("BuyCoin")
  ordersToPay    Order[]         @relation("PayCoin")

  buyRates ExchangeRate[] @relation("BuyRateCoin")
  payRates ExchangeRate[] @relation("PayRateCoin")
  
  // BACK-RELATION untuk Payment ↔ Coin
  payments Payment[] @relation("PaymentCoin")

  createdAt DateTime @default(now())
}

model Network {
  id       String        @id @default(uuid())
  name     String        @unique
  logoUrl  String?
  isActive Boolean       @default(true)
  coins    CoinNetwork[]

  paymentOptions PaymentOption[]
  buyOrders      Order[]         @relation("BuyNetwork")
  payOrders      Order[]         @relation("PayNetwork")

  buyRates ExchangeRate[] @relation("BuyRateNetwork")
  payRates ExchangeRate[] @relation("PayRateNetwork")
  
  family   ChainFamily   @default(EVM) 
  chainId  String?
  symbol   String?
  rpcUrl   String?
  explorer String?
  
  requiredConfirmations Int       @default(1)
  minConfirmationsLow   Int?      // opsional: untuk transaksi kecil
  minConfirmationsHigh  Int?      // opsional: transaksi besar
  explorerTxTemplate    String?   // contoh: "https://etherscan.io/tx/{tx}"
  explorerAddrTemplate  String?   // contoh: "https://etherscan.io/address/{addr}"
  
  // BACK-RELATION untuk Payment ↔ Network
  payments Payment[] @relation("PaymentNetwork")

  createdAt DateTime @default(now())
}

model CoinNetwork {
  id        String @id @default(uuid())
  coinId    String
  networkId String

  coin    Coin    @relation(fields: [coinId], references: [id])
  network Network @relation(fields: [networkId], references: [id])
  
  assetType       AssetType   @default(NATIVE)
  contractAddress String?     @db.VarChar(128)
  decimals        Int?        @default(18)
  symbolOverride  String?

  memoKind        MemoKind    @default(NONE)
  memoLabel       String?
  memoRegex       String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([coinId, networkId])
  @@index([networkId, contractAddress])
  @@index([memoKind])
}

model PaymentOption {
  id        String @id @default(uuid())
  coinId    String
  networkId String

  coin    Coin    @relation(fields: [coinId], references: [id])
  network Network @relation(fields: [networkId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([coinId, networkId])
}

model Payment {
  id           String        @id @default(uuid())
  orderId      String        @unique
  order        Order         @relation(fields: [orderId], references: [id])

  // Identitas aset & jaringan pada sisi pembayaran
  coinId       String
  networkId    String
  coin         Coin          @relation("PaymentCoin", fields: [coinId], references: [id])
  network      Network       @relation("PaymentNetwork", fields: [networkId], references: [id])

  // Tujuan pembayaran (alamat invoice) + memo/tag
  payToAddress String
  payToMemo    String?

  // Deteksi transaksi yang masuk
  txHash       String?       @db.VarChar(128)
  fromAddress  String?
  toAddress    String?
  amountRaw    String?
  decimals     Int?
  assetType    AssetType?
  assetContract String?      @db.VarChar(128)

  // Konfirmasi
  confirmations          Int           @default(0)
  requiredConfirmations  Int           @default(1)
  detectedAt             DateTime?
  confirmedAt            DateTime?

  // Status verifikasi
  status        PaymentStatus @default(NOT_STARTED)

  // Idempoten & audit
  lastWebhookEventId String?  @unique
  verificationSource String?
  notes              String?

  // BACK-RELATION untuk WebhookEvent
  webhookEvents WebhookEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([networkId, txHash])
  @@index([payToAddress])
}

model HdCursor {
  id         String   @id @default(uuid())
  chain      String   @unique
  nextIndex  Int      @default(0)
  lastUsedAt DateTime?
  updatedAt  DateTime @updatedAt
}

model WalletPoolLegacy {
  id              String @id @default(uuid())
  chain           String
  derivationIndex Int
  networkId       String?
  address         String @unique

  isUsed          Boolean @default(false)
  assignedOrderId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  order Order? @relation("WalletPool_Order", fields: [assignedOrderId], references: [id])

  @@unique([chain, derivationIndex])
  @@index([chain, isUsed])
  @@index([networkId])
}


model WebhookEvent {
  id           String   @id @default(uuid())
  provider     String   // "alchemy", "trongrid", "solana-webhook", dsb.
  externalId   String   @unique // event_id dari provider
  payloadHash  String   // hash body utk idempoten tambahan
  rawPayload   Json
  receivedAt   DateTime @default(now())
  handled      Boolean  @default(false)

  // relasi longgar ke Payment bila sudah diketahui
  paymentId    String?
  payment      Payment? @relation(fields: [paymentId], references: [id])

  @@index([provider, handled])
}

model Order {
  id String @id @default(cuid())

  coinToBuyId  String
  buyNetworkId String
  coinToBuy    Coin    @relation("BuyCoin", fields: [coinToBuyId], references: [id])
  buyNetwork   Network @relation("BuyNetwork", fields: [buyNetworkId], references: [id])

  payWithId    String
  payNetworkId String
  payWith      Coin    @relation("PayCoin", fields: [payWithId], references: [id])
  payNetwork   Network @relation("PayNetwork", fields: [payNetworkId], references: [id])

  amount         Float
  receivedAmount Float? @default(0)
  priceRate      Float

  receivingAddr String
  receivingMemo String?

  // alamat invoice yang ditampilkan ke pembeli
  paymentAddr   String
  paymentMemo   String?

  // dipindah ke Payment:
  // txHash        String?
  // confirmations Int         @default(0)

  status        OrderStatus @default(PENDING)
  
  // BACK-RELATION 1:1 ke Payment
  payment Payment?

  payoutHash      String?   @db.VarChar(128) @unique
  payoutAt        DateTime?

  walletPoolLegacy WalletPoolLegacy? @relation("WalletPool_Order")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
}

model ExchangeRate {
  id String @id @default(uuid())

  buyCoinId    String
  buyNetworkId String
  payCoinId    String
  payNetworkId String

  buyCoin    Coin    @relation("BuyRateCoin", fields: [buyCoinId], references: [id])
  buyNetwork Network @relation("BuyRateNetwork", fields: [buyNetworkId], references: [id])
  payCoin    Coin    @relation("PayRateCoin", fields: [payCoinId], references: [id])
  payNetwork Network @relation("PayRateNetwork", fields: [payNetworkId], references: [id])

  rate      Float
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buyCoinId, buyNetworkId, payCoinId, payNetworkId])
}

enum OrderStatus {
  PENDING             // Order dibuat, belum men-generate invoice
  WAITING_PAYMENT     // Invoice dibuat, menunggu pembayaran
  WAITING_CONFIRMATION// Pembayaran terdeteksi, menunggu konfirmasi on-chain
  CONFIRMED           // Pembayaran terverifikasi, order siap diproses
  COMPLETED           // Barang/jasa terpenuhi
  EXPIRED             // Invoice kedaluwarsa (belum ada pembayaran memadai)
  CANCELED            // user melakukan pembatalan manual
  FAILED               // Error fatal (misconfig dsb.)
}

enum PaymentStatus {
  NOT_STARTED       // belum ada tx terdeteksi
  DETECTED          // notifikasi awal (webhook/stream)
  UNDERPAID         // kurang dari expected
  OVERPAID          // opsional, kalau kamu mau tangani kelebihan
  CONFIRMING        // valid, menunggu N konfirmasi
  CONFIRMED         // final, >= N konfirmasi
  INVALID           // salah alamat/token/memo atau tx gagal/reorg
  REFUNDED          // opsional
}
