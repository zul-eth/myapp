"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("@prisma/client");
var prisma = new client_1.PrismaClient();
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var coins, bySymbol, nets, netByName, entries, ERC20, _i, entries_1, e;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        ['ETH', 'Ether'], ['USDT', 'Tether USD'], ['USDC', 'USD Coin'], ['DAI', 'Dai'],
                        ['TRX', 'TRON'], ['SOL', 'Solana'], ['XRP', 'XRP'],
                        ['DOGE', 'Dogecoin'], ['LTC', 'Litecoin'], ['TON', 'Toncoin'],
                        ['SUI', 'Sui'], ['EOS', 'EOS'], ['MATIC', 'Polygon'], ['BNB', 'BNB']
                    ].map(function (_a) {
                        var symbol = _a[0], name = _a[1];
                        return prisma.coin.upsert({
                            where: { symbol: symbol }, update: {}, create: { symbol: symbol, name: name }
                        });
                    }))];
                case 1:
                    coins = _a.sent();
                    bySymbol = function (s) { return coins.find(function (c) { return c.symbol === s; }); };
                    return [4 /*yield*/, Promise.all([
                            { name: 'ETHEREUM', family: client_1.ChainFamily.EVM, chainId: '1', symbol: 'ETH' },
                            { name: 'BASE', family: client_1.ChainFamily.EVM, chainId: '8453', symbol: 'ETH' },
                            { name: 'OPTIMISM', family: client_1.ChainFamily.EVM, chainId: '10', symbol: 'ETH' },
                            { name: 'ARBITRUM', family: client_1.ChainFamily.EVM, chainId: '42161', symbol: 'ETH' },
                            { name: 'POLYGON', family: client_1.ChainFamily.EVM, chainId: '137', symbol: 'MATIC' },
                            { name: 'BSC', family: client_1.ChainFamily.EVM, chainId: '56', symbol: 'BNB' },
                            { name: 'TRON', family: client_1.ChainFamily.TRON, symbol: 'TRX' },
                            { name: 'SOLANA', family: client_1.ChainFamily.SOLANA, symbol: 'SOL' },
                            { name: 'XRP', family: client_1.ChainFamily.XRP, symbol: 'XRP' },
                            { name: 'DOGE', family: client_1.ChainFamily.DOGE, symbol: 'DOGE' },
                            { name: 'LTC', family: client_1.ChainFamily.LTC, symbol: 'LTC' },
                            { name: 'TON', family: client_1.ChainFamily.TON, symbol: 'TON' },
                            { name: 'SUI', family: client_1.ChainFamily.SUI, symbol: 'SUI' },
                            { name: 'EOS', family: client_1.ChainFamily.EOS, symbol: 'EOS' },
                        ].map(function (n) { return prisma.network.upsert({ where: { name: n.name }, update: {}, create: n }); }))];
                case 2:
                    nets = _a.sent();
                    netByName = function (n) { return nets.find(function (x) { return x.name === n; }); };
                    entries = [];
                    // EVM Native
                    ['ETHEREUM', 'BASE', 'OPTIMISM', 'ARBITRUM', 'POLYGON', 'BSC'].forEach(function (n) {
                        var sym = n === 'POLYGON' ? 'MATIC' : (n === 'BSC' ? 'BNB' : 'ETH');
                        entries.push({
                            where: { coinId_networkId: { coinId: bySymbol(sym).id, networkId: netByName(n).id } },
                            update: {},
                            create: { coinId: bySymbol(sym).id, networkId: netByName(n).id, assetType: client_1.AssetType.NATIVE, decimals: 18 }
                        });
                    });
                    ERC20 = [
                        // [symbol, network, contract, decimals]
                        ['USDT', 'ETHEREUM', '0xdAC17F958D2ee523a2206206994597C13D831ec7', 6],
                        ['USDC', 'ETHEREUM', '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6],
                        ['DAI', 'ETHEREUM', '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18],
                        // Tambahkan BASE/OP/ARB/POL/BSC kontrak sesuai real data mu
                    ];
                    ERC20.forEach(function (_a) {
                        var sym = _a[0], net = _a[1], addr = _a[2], dec = _a[3];
                        entries.push({
                            where: { coinId_networkId: { coinId: bySymbol(sym).id, networkId: netByName(net).id } },
                            update: {},
                            create: {
                                coinId: bySymbol(sym).id, networkId: netByName(net).id,
                                assetType: client_1.AssetType.EVM_ERC20, contractAddress: addr, decimals: dec
                            }
                        });
                    });
                    // Nonâ€‘EVM Native only
                    [
                        ['TRX', 'TRON', 6, client_1.MemoKind.NONE],
                        ['SOL', 'SOLANA', 9, client_1.MemoKind.NONE],
                        ['XRP', 'XRP', 6, client_1.MemoKind.XRP_TAG],
                        ['DOGE', 'DOGE', 8, client_1.MemoKind.NONE],
                        ['LTC', 'LTC', 8, client_1.MemoKind.NONE],
                        ['TON', 'TON', 9, client_1.MemoKind.TON_TEXT],
                        ['SUI', 'SUI', 9, client_1.MemoKind.NONE],
                        ['EOS', 'EOS', 4, client_1.MemoKind.EOS_TEXT], // memo text
                    ].forEach(function (_a) {
                        var sym = _a[0], net = _a[1], dec = _a[2], memo = _a[3];
                        entries.push({
                            where: { coinId_networkId: { coinId: bySymbol(sym).id, networkId: netByName(net).id } },
                            update: {},
                            create: {
                                coinId: bySymbol(sym).id, networkId: netByName(net).id,
                                assetType: client_1.AssetType.NATIVE, decimals: dec,
                                memoKind: memo,
                                memoLabel: memo === client_1.MemoKind.XRP_TAG ? 'Destination tag' :
                                    memo === client_1.MemoKind.EOS_TEXT ? 'Memo' :
                                        memo === client_1.MemoKind.TON_TEXT ? 'Comment' : undefined
                            }
                        });
                    });
                    _i = 0, entries_1 = entries;
                    _a.label = 3;
                case 3:
                    if (!(_i < entries_1.length)) return [3 /*break*/, 6];
                    e = entries_1[_i];
                    return [4 /*yield*/, prisma.coinNetwork.upsert(e)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6: 
                // PaymentOption operasional (contoh aktifkan ETH & USDT di BASE)
                return [4 /*yield*/, prisma.paymentOption.upsert({
                        where: { coinId_networkId: { coinId: bySymbol('ETH').id, networkId: netByName('BASE').id } },
                        update: { isActive: true },
                        create: { coinId: bySymbol('ETH').id, networkId: netByName('BASE').id, isActive: true }
                    })];
                case 7:
                    // PaymentOption operasional (contoh aktifkan ETH & USDT di BASE)
                    _a.sent();
                    return [4 /*yield*/, prisma.paymentOption.upsert({
                            where: { coinId_networkId: { coinId: bySymbol('USDT').id, networkId: netByName('BASE').id } },
                            update: { isActive: true },
                            create: { coinId: bySymbol('USDT').id, networkId: netByName('BASE').id, isActive: true }
                        })];
                case 8:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
main().finally(function () { return prisma.$disconnect(); });
